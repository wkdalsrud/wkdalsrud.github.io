<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-28T21:19:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">기억저장소</title><subtitle>개발공부를 기록하는 공간입니다.</subtitle><author><name>민경</name></author><entry><title type="html">JAVA 기초</title><link href="http://localhost:4000/java/javabase/" rel="alternate" type="text/html" title="JAVA 기초" /><published>2022-02-28T00:00:00+09:00</published><updated>2022-02-28T00:00:00+09:00</updated><id>http://localhost:4000/java/javabase</id><content type="html" xml:base="http://localhost:4000/java/javabase/"><![CDATA[<h2 id="java란">JAVA란?</h2>
<ul>
  <li>JAVA는 자바 컴파일러가 제공하는 언어이다.</li>
  <li>C언어나 C++언어같은 다른 언어들의 컴파일러는 기계어로 번역할 때 프로그램이 실행될 대상 컴퓨터의 운영체제에 종속적인 코드로 변환을 한다. 이 코드로 다른 운영체제나 하드웨어에서 실행을 하려면 코드를 재작성하거나 컴파일러를 다시 실행시켜야 한다는 단점이 있다.
    <ul>
      <li>자바로 작성된 프로그램은 운영체제의 종류에 관계없이 실행이 가능하기 때문에 운영체제에 따라 프로그램을 변경하지 않고도 실행이 가능하다.</li>
      <li>이것은 JVM(자바가상머신)을 통해서 가능한데 자바 응용프로그램은 전달받은 운영체제나 하드웨어가 아닌 JVM하고만 통신하고 JVM이 자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할 수 있도록 변환하여 전달한다.</li>
    </ul>
  </li>
</ul>

<h2 id="jvm-java-virtual-machine">JVM (Java Virtual Machine)</h2>
<ul>
  <li>자바를 실행하기 위한 가상 컴퓨터</li>
  <li>JVM은 서로 다른 플랫폼에서 자바 프로그램이 실행되는 동일한 환경을 제공한다.</li>
  <li>자바로 작성된 코드는 모두 이 JVM 위에서만 실행되기 때문에 반드시 JVM이 필요하다.</li>
</ul>

<h2 id="jre-java-runtime-environment">JRE (Java Runtime Environment)</h2>
<h4 id="자바-응용프로그램이-실행될-때-필요한-소프트웨어">자바 응용프로그램이 실행될 때 필요한 소프트웨어</h4>
<h3 id="구성">구성</h3>
<ul>
  <li>개발자가 활용할 수 있는 자바 API</li>
  <li>자바 가상 머신을 포함</li>
</ul>

<h2 id="jdk-java-development-kit">JDK (Java Development Kit)</h2>
<h4 id="개발자들에게-무료로-배포하는-소프트웨어">개발자들에게 무료로 배포하는 소프트웨어</h4>
<h3 id="구성-1">구성</h3>
<ul>
  <li>자바 컴파일러 등의 개발 도구</li>
  <li>JRE (Java Runtime Environment)</li>
</ul>]]></content><author><name>민경</name></author><category term="JAVA" /><category term="JAVA" /><summary type="html"><![CDATA[JAVA란? JAVA는 자바 컴파일러가 제공하는 언어이다. C언어나 C++언어같은 다른 언어들의 컴파일러는 기계어로 번역할 때 프로그램이 실행될 대상 컴퓨터의 운영체제에 종속적인 코드로 변환을 한다. 이 코드로 다른 운영체제나 하드웨어에서 실행을 하려면 코드를 재작성하거나 컴파일러를 다시 실행시켜야 한다는 단점이 있다. 자바로 작성된 프로그램은 운영체제의 종류에 관계없이 실행이 가능하기 때문에 운영체제에 따라 프로그램을 변경하지 않고도 실행이 가능하다. 이것은 JVM(자바가상머신)을 통해서 가능한데 자바 응용프로그램은 전달받은 운영체제나 하드웨어가 아닌 JVM하고만 통신하고 JVM이 자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할 수 있도록 변환하여 전달한다.]]></summary></entry><entry><title type="html">맥북[m1]에서 java 초기설정</title><link href="http://localhost:4000/java/javasetting/" rel="alternate" type="text/html" title="맥북[m1]에서 java 초기설정" /><published>2022-02-28T00:00:00+09:00</published><updated>2022-02-28T00:00:00+09:00</updated><id>http://localhost:4000/java/javasetting</id><content type="html" xml:base="http://localhost:4000/java/javasetting/"><![CDATA[]]></content><author><name>민경</name></author><category term="JAVA" /><category term="JAVA" /><category term="초기설정" /><category term="macbook" /><category term="m1" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[Pro Git] 1장</title><link href="http://localhost:4000/git%20&%20github/progit1/" rel="alternate" type="text/html" title="[Pro Git] 1장" /><published>2022-02-20T00:00:00+09:00</published><updated>2022-02-20T00:00:00+09:00</updated><id>http://localhost:4000/git%20&amp;%20github/progit1</id><content type="html" xml:base="http://localhost:4000/git%20&amp;%20github/progit1/"><![CDATA[<h2 id="버전-관리-시스템-vsc--version-control-system">버전 관리 시스템 (VSC : Version Control System)</h2>
<p>파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템</p>

<h2 id="장점">장점</h2>
<ol>
  <li>각 파일을 이전 상태로 되돌릴 수 있다.</li>
  <li>프로젝트를 통째로 이전 상태로 되돌릴 수 있다.</li>
  <li>시간에 따라 수정 내용을 비교해 볼 수 있다.</li>
  <li>누가 문제를 일으켰는지 추적할 수 있다.</li>
  <li>누가 언제 만들어낸 이슈인지도 알 수 있다.</li>
  <li>파일을 잃어버리거나 잘못 고쳤을 때 쉽게 복구할 수 있다.</li>
</ol>

<h2 id="git의-세-가지-상태로-파일-관리">Git의 세 가지 상태로 파일 관리</h2>

<h3 id="committed">Committed</h3>
<ul>
  <li>데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미한다</li>
</ul>

<h3 id="modified">Modified</h3>
<ul>
  <li>수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것을 의미한다</li>
</ul>

<h3 id="staged">Staged</h3>
<ul>
  <li>현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미한다</li>
</ul>

<h2 id="git-프로젝트의-3가지-단계">Git 프로젝트의 3가지 단계</h2>

<h3 id="working-directory">Working Directory</h3>
<ul>
  <li>프로젝트의 특정 버전을 Checkout 한 것이다.</li>
</ul>

<h3 id="staging-area">Staging Area</h3>
<ul>
  <li>Git 디렉터리에 있다.</li>
  <li>단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장한다.</li>
</ul>

<h3 id="git-directory-repository">.git Directory (Repository)</h3>
<ul>
  <li>Git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳을 말한다.</li>
  <li>다른 컴퓨터에 있는 저장소를 Clone 할 때 Git 디렉터리가 만들어 진다.</li>
</ul>

<h2 id="git으로-하는-일">Git으로 하는 일</h2>
<ol>
  <li>Working Directory에서 파일을 수정한다.</li>
  <li>Staging Area에 파일을 Stage해서 커밋할 스냅샷을 만든다.</li>
  <li>Staging Area에 있는 파일들을 커밋해서 Git 디렉터리에 영구적인 스냅샷으로 저장한다.</li>
</ol>

<blockquote>
  <p>Git 디렉터리에 있는 파일들은 <code class="language-plaintext highlighter-rouge">Committed</code> 상태이다.<br />
파일을 수정하고 Staging Area에 추가했다면 <code class="language-plaintext highlighter-rouge">Staged</code>이다.<br />
그리고 Checkout하고 나서 수정했지만, 아직 Staging Area에 올리지 않았으면 <code class="language-plaintext highlighter-rouge">Modified</code>이다.</p>
</blockquote>

<h2 id="git을-사용하는-방법">Git을 사용하는 방법</h2>
<ul>
  <li>CLI
    <ul>
      <li>Command line interface</li>
    </ul>
  </li>
  <li>GUI
    <ul>
      <li>Graphical User Interface</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>Git의 모든 기능을 지원하는 것은 CLI 뿐이다.</p>
</blockquote>

<h2 id="git을-설치하기-위해-필요한-라이브러리">Git을 설치하기 위해 필요한 라이브러리</h2>
<ul>
  <li>curl</li>
  <li>zlib</li>
  <li>openssl</li>
  <li>scpat</li>
  <li>libiconv</li>
</ul>

<h2 id="git-최초-설정">Git 최초 설정</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">/etc/gitconfig</code> 파일
    <ul>
      <li>시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다.</li>
      <li>git <code class="language-plaintext highlighter-rouge">config --system</code> 옵션으로 이 파일을 읽고 쓸 수 있다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">~/.gitconfig</code>, <code class="language-plaintext highlighter-rouge">~/.config/git/config</code> 파일
    <ul>
      <li>특정 사용자에게만 적용되는 설정이다</li>
      <li><code class="language-plaintext highlighter-rouge">git config --global</code> 옵션으로 이 파일을 읽고 쓸 수 있다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">.git/config</code> 파일
    <ul>
      <li>Git 디렉터리에 있고 특정 저장소 혹은 현재 작업 중인 프로젝트에만 적용된다.</li>
    </ul>
  </li>
</ol>

<h2 id="사용자-정보-설정">사용자 정보 설정</h2>
<p>Git을 설치하고 나서 가장 먼저 해야 하는 설정은 사용자 이름과 이메일 주소를 설정해야 한다.<br />
Git은 커밋할 때마다 이 정보를 사용하고 한번 커밋한 후에는 정보를 변경할 수 없다.<br />
<code class="language-plaintext highlighter-rouge">--global</code> 옵션으로 설정하는 것은 딱 한 번만 하면 된다.<br />
만약 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 <code class="language-plaintext highlighter-rouge">--global</code> 옵션을 빼고 명령을 실행한다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git config --global user.name "user.name"</code></li>
  <li><code class="language-plaintext highlighter-rouge">git config --global user.email "user.email"</code></li>
</ul>

<h2 id="설정-확인">설정 확인</h2>
<p><code class="language-plaintext highlighter-rouge">git config --list</code> 명령으로 설정한 모든 것을 확인할 수 있다.</p>

<h2 id="도움말-보기">도움말 보기</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">git help &lt;verb&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">git &lt;verb&gt; --help</code></li>
  <li><code class="language-plaintext highlighter-rouge">man git-&lt;verb&gt;</code></li>
</ul>

<p>예를 들면 <code class="language-plaintext highlighter-rouge">git help config</code> 도움말은 언제 어디서나 볼 수 있다.</p>]]></content><author><name>민경</name></author><category term="Git &amp; Github" /><category term="Git" /><category term="Pro Git" /><summary type="html"><![CDATA[버전 관리 시스템 (VSC : Version Control System) 파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템]]></summary></entry><entry><title type="html">[Pro Git] 2장</title><link href="http://localhost:4000/git%20&%20github/progit2/" rel="alternate" type="text/html" title="[Pro Git] 2장" /><published>2022-02-20T00:00:00+09:00</published><updated>2022-02-20T00:00:00+09:00</updated><id>http://localhost:4000/git%20&amp;%20github/progit2</id><content type="html" xml:base="http://localhost:4000/git%20&amp;%20github/progit2/"><![CDATA[<h2 id="git-저장소-만들기">Git 저장소 만들기</h2>
<ol>
  <li>기존 프로젝트나 디렉터리를 Git 저장소로 만드는 방법</li>
  <li>다른 서버에 있는 저장소를 Clone 하는 방법</li>
</ol>

<h3 id="기존-디렉터리를-git-저장소로-만들기">기존 디렉터리를 Git 저장소로 만들기</h3>
<p>기존 프로젝트를 Git으로 관리하고 싶을 때 프로젝트의 디렉터리로 이동해서 <code class="language-plaintext highlighter-rouge">git init</code> 명령을 실행한다.<br />
이 명령은 <code class="language-plaintext highlighter-rouge">.git</code> 이라는 하위 디렉터리를 만든다.<br />
.git 디렉터리에는 저장소에 필요한 뼈대 파일이 들어 있고, 이 명령만으로는 아직 프로젝트의 어떤 파일도 관리하지 않는다.</p>
<blockquote>
  <p>.git 파일을 지우게 되면 내가 git으로 관리하던 내역들이 다 날아간다!!<br />
.git 파일은 숨김 파일 보기를 설정해야 보인다.<br />
mac에서 숨김 파일을 보려면 <code class="language-plaintext highlighter-rouge">command</code> + <code class="language-plaintext highlighter-rouge">shift</code> + <code class="language-plaintext highlighter-rouge">.</code> 을 누르면 보임</p>
</blockquote>

<p>Git이 파일을 관리하게 하려면 저장소에 파일을 추가하고 커밋해야 한다.</p>
<ul>
  <li>git add *</li>
  <li>git add LICENSE</li>
  <li>git commit -m ‘initial project version’</li>
</ul>

<h3 id="기존-저장소를-clone-하기">기존 저장소를 Clone 하기</h3>
<p>다른 프로젝트에 참여하려거나 Git 저장소를 복사하고 싶을 대 <code class="language-plaintext highlighter-rouge">git clone</code> 명령어를 사용한다.<br />
git clone을 실행하면 프로젝트 히스토리를 전부 받아온다.<br />
git clone [url] 명령으로 저장소를 Clone 한다.</p>
<ul>
  <li>git clone https://wkdalsrud.github.io</li>
</ul>

<p>저장소의 데이터를 모두 가져와서 자동으로 가장 최신 버전을 Checkout 해 놓는다.</p>

<h2 id="수정하고-저장소에-저장하기">수정하고 저장소에 저장하기</h2>

<h4 id="working-directory">Working Directory</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Tracked</code>
    <ul>
      <li>관리대상임</li>
      <li>이미 스냅샷에 포함돼 있던 파일이다.</li>
      <li><code class="language-plaintext highlighter-rouge">Unmodified</code>
        <ul>
          <li>수정하지 않음</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">Modified</code>
        <ul>
          <li>수정함</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">Staged</code>
        <ul>
          <li>커밋으로 저장소에 기록할</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Untracked</code>
    <ul>
      <li>관리대상이 아님</li>
      <li>Unmodified, Modified, Staged 제외한 모든 파일은 Untracked 파일이다.</li>
      <li>Untracked 파일은 워킹 디렉터리에 있는 파일 중 스냅샷에도 Stageing Area에도 포함되지 않은 파일이다.</li>
    </ul>
  </li>
</ul>

<p>처음 저장소를 Clone하면 파일을 Checkout하고 나서 아무것도 수정하지 않았기 때문에 모든 파일은 Tracked이면서 Unmodified 상태이다. (관리대상이면서 수정하지 않은 상태)</p>

<p>마지막 커밋 이후 아직 아무것도 수정하지 않은 상태에서 어떤 파일을 수정하면 Git은 그 파일을 Modified 상태로 인식한다.<br />
실제로 커밋하기 위해서는 이 수정한 파일을 Staged 상태로 만들고 Staged 상태의 파일을 커밋한다.</p>

<h3 id="파일의-상태-확인하기">파일의 상태 확인하기</h3>
<p><code class="language-plaintext highlighter-rouge">git status</code><br />
Git은 Untracked 파일을 아직 스탭샷(커밋)에 넣어지지 않은 파일이라고 본다.<br />
<strong>현재 폴더의 상황을 git의 관점에서 보여줌</strong><br />
파일이 Tracked 상태가 되기 전까지는 Git은 절대 그 파일을 커밋하지 않는다.<br />
<img width="1015" alt="image" src="https://user-images.githubusercontent.com/73566453/154846225-93922d15-5fa1-46ec-ab8e-07db220000a8.png" /></p>

<h3 id="파일을-새로-추척하기">파일을 새로 추척하기</h3>
<p><code class="language-plaintext highlighter-rouge">git add</code></p>

<p><code class="language-plaintext highlighter-rouge">git add README</code> 명령을 실행하면 README 파일을 추척한다.<br />
git status 명령을 다시 실행하면 README 파일이 Tracked 상태이면서 커밋에 추가될 Staged 상태라는 것을 알 수 있다.<br />
<img width="986" alt="image" src="https://user-images.githubusercontent.com/73566453/154846322-3c312418-6df7-44e1-b57d-6fe894d562d7.png" /></p>

<p><code class="language-plaintext highlighter-rouge">git add .</code> 명령을 실행하면 폴더 안의 모든 것을 추척한다.<br />
<strong><em>“Changes to be committed”</em></strong> 에 들어 있는 파일은 <u>Staged 상태라는 것을 의미한다.</u><br />
커밋하면 git add를 실행한 시점의 파일이 커밋되어 저장소 히스토리에 남는다.
<img width="939" alt="스크린샷 2022-02-20 오후 11 48 42" src="https://user-images.githubusercontent.com/73566453/154848437-ebba7882-0b89-477b-bcf5-c4ef0f5406e2.png" /></p>

<h3 id="modified-상태의-파일을-stage-하기">Modified 상태의 파일을 Stage 하기</h3>
<p><strong><em>“Changes not staged for commit”</em></strong> 은 수정한 파일이 <u>Tracked 상태이지만 아직 Staged 상태는 아니라는 것이다.</u><br />
Staged 상태로 만들려면 git add 명령을 실행해야 한다.<br />
<code class="language-plaintext highlighter-rouge">git add</code> 명령은 파일을 새로 추척할 때도 사용하고 수정한 파일을 Staged 상태로 만들 때도 사용한다.</p>

<h3 id="파일-무시하기">파일 무시하기</h3>
<p>보통 로그 파일이나 빌드 시스템이 자동으로 생성한 파일은 Git이 관리할 필요가 없다.<br />
그런 파일을 무시하려면</p>

<ol>
  <li>.gitignore 파일을 만들고 그 안에 무시할 파일 패턴을 적는다.
    <blockquote>
      <p>.gitignore 파일의 예<br />
cat .gitignore<br />
<span style="color:gray">#확장자가 c인 파일을 무시</span><br />
<code class="language-plaintext highlighter-rouge">*.c</code><br />
<span style="color:gray">#확장자가 “.o”나 “.a”인 파일을 무시</span><br />
<code class="language-plaintext highlighter-rouge">*.[oa]</code> <br />
<span style="color:gray">#~로 끝나는 모든 파일을 무시</span><br />
<code class="language-plaintext highlighter-rouge">*~</code></p>
    </blockquote>
  </li>
  <li>.gitignore 파일 안에 무시할 파일명을 적어준다.
    <blockquote>
      <p>예를 들면<br />
git.yaml 파일 안에 아이디와 비밀번호 같은 노출이 되면 안 되는 내용이 있다고 치자.<br />
<code class="language-plaintext highlighter-rouge">.gitignore</code> 파일 안에 <code class="language-plaintext highlighter-rouge">git.yaml</code>이라고 작성하면 <code class="language-plaintext highlighter-rouge">git status</code> 명령을 실행했을 때 git.yaml 파일은 보이지 않게 되고 .gitignore 파일만 보이게 된다.</p>
    </blockquote>
  </li>
</ol>

<p><br /></p>

<p>후,,,ㅎ<br />
<span style="color:blue">책을 보면서 정리를 하는데도 무슨 말인지 잘 모르겠당;;;</span><br />
git이 좀 더 익숙해지면 다시 정리하는 걸로ㅠㅠ</p>]]></content><author><name>민경</name></author><category term="Git &amp; Github" /><category term="Git" /><category term="Pro Git" /><summary type="html"><![CDATA[Git 저장소 만들기 기존 프로젝트나 디렉터리를 Git 저장소로 만드는 방법 다른 서버에 있는 저장소를 Clone 하는 방법]]></summary></entry><entry><title type="html">Git 명령어</title><link href="http://localhost:4000/git%20&%20github/git/" rel="alternate" type="text/html" title="Git 명령어" /><published>2022-02-18T00:00:00+09:00</published><updated>2022-02-18T00:00:00+09:00</updated><id>http://localhost:4000/git%20&amp;%20github/git</id><content type="html" xml:base="http://localhost:4000/git%20&amp;%20github/git/"><![CDATA[<h1 id="설치와-설정">설치와 설정</h1>

<h2 id="git-config">git config</h2>
<ul>
  <li>이 명령으로 사용자 이름이나 터미널 색, 편집기 등을 설정한다.</li>
  <li>저장소마다 다르게 혹은 글로벌하게 설정할 수 있는데 각각 설정파일이 다르다.</li>
</ul>

<h2 id="git-config-global-username-본인-이름-입력">git config –global user.name “본인 이름 입력”</h2>
<ul>
  <li>사용자 이름 설정</li>
</ul>

<h2 id="git-config-global-useremail-본인-이메일-입력">git config –global user.email “본인 이메일 입력”</h2>
<ul>
  <li>사용자 이메일 설정</li>
</ul>

<h2 id="git-config-username">git config user.name</h2>
<ul>
  <li>사용자 이름 확인</li>
</ul>

<h2 id="git-config-useremail">git config user.email</h2>
<ul>
  <li>사용자 이메일 확인</li>
</ul>

<h2 id="git-config--list">git config -list</h2>
<ul>
  <li>설정한 모든 것을 보여준다.</li>
</ul>

<h2 id="git-help">git help</h2>
<ul>
  <li>Git에 포함된 문서를 보여준다.</li>
</ul>

<h1 id="프로젝트-가져오기--실행하기">프로젝트 가져오기 / 실행하기</h1>

<h2 id="git-init">git init</h2>
<ul>
  <li>기존 directory를 Git 저장소로 만들기</li>
  <li>프로젝트 디렉터리로 가서 git init 이라고 실행한다.</li>
  <li>디렉터리에 Git 저장소가 새로 만들어지고 프로젝트를 버전 관리할 수 있다.</li>
</ul>

<h2 id="git-clone-url">git clone [URL]</h2>
<ul>
  <li>기존 저장소 복사</li>
  <li>git clone은 다른 명령어를 몇 개 실행한다.
    <ul>
      <li>디렉터리를 만들고 디렉터리로 들어가고 나서 git init 명령으로 빈 Git 저장소를 만든다.</li>
      <li>그다음 입력한 URL을 origin이라는 기본값 이름의 리모트를 추가하고 git fetch 명령으로 리모트 저장소에서 데이터를 가져온다.</li>
      <li>마지막으로 최종 커밋을 워킹 디렉터리에 Checkout한다.</li>
    </ul>
  </li>
</ul>

<h1 id="스냅샷-다루기">스냅샷 다루기</h1>

<h2 id="git-add">git add</h2>
<ul>
  <li>git add 명령은 Working Directory에서 Staging Area로 콘텐츠를 추가하는 명령어다.</li>
  <li>git commit은 오로지 Staging Area만 바라보기 때문에 git add 명령으로 커밋할 스냅샷을 잘 다듬어야 한다.</li>
</ul>

<h2 id="git-add-">git add *</h2>
<ul>
  <li>파일이 여러개일 경우 <code class="language-plaintext highlighter-rouge">git add *</code>로 모든 파일을 staged 상태로 만든다. 그런데 가끔 <code class="language-plaintext highlighter-rouge">git add *</code>를 하면 다음과 같은 상황이 나올 때가 있다
    <blockquote>
      <p>git add * The following paths are ignored by one of your .gitignore files: git-add/ignore.txt<br />
Use -f if you really want to add them.</p>
    </blockquote>
  </li>
</ul>

<p>이 말은 .gitignore에 현재 staged로 변경할 파일의 이름이 있다는 것이다.<br />
.gitignore로 git에 안 올린다고 했는데 <code class="language-plaintext highlighter-rouge">git add *</code>로 다 올린다고 하니 다시 확인하라는 말이다.</p>

<h2 id="git-add--1">git add .</h2>
<ul>
  <li>추가하려는 파일이 많을 경우 <code class="language-plaintext highlighter-rouge">git add .</code> 명령을 이용하면 해당 폴더의 Untracked Files 모두를 한번에 stage 하는 것이 가능하다</li>
  <li>인덱스에 추가된 파일을 제외하려면 <code class="language-plaintext highlighter-rouge">git rm --cached</code> 명령을 사용한다
    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">git add .</code>는 <code class="language-plaintext highlighter-rouge">.gitignore</code>에 있는 파일은 제외하고 staged에 올린다.<br />
<code class="language-plaintext highlighter-rouge">git add .</code>를 사용해서 staged에 올리면 된다!</p>
    </blockquote>
  </li>
</ul>

<h2 id="git-status">git status</h2>
<ul>
  <li>워킹 디렉터리의 파일 상태 보기</li>
  <li>Modified 상태이거나 Unstaged 상태인 파일이 무엇인지 Staged 상태이지만 아직 커밋하지 않은 파일은 무엇인지 보여준다.</li>
  <li>Staging Area에 파일을 넣고 꺼내는 방법에 대한 힌트도 보여준다.</li>
</ul>

<h2 id="git-diff">git diff</h2>
<ul>
  <li>파일의 변경사항 보기</li>
  <li><u>Working Directory</u>와 <u>Staging Area</u>를 비교 (git diff)</li>
  <li><u>Staging Area</u>와 <u>마지막 커밋</u>을 비교 (git diff –staged)</li>
  <li>두 커밋 비교 (git diff master branchB)</li>
</ul>

<h2 id="git-commit">git commit</h2>
<ul>
  <li>git add로 Staging Area에 넣은 모든 파일을 커밋한다.
    <ul>
      <li>똑같은 파일을 modified하게 되면 add로 git에게 알려주고 commit을 해야 한다.</li>
      <li>데이터베이스에는 하나의 스냅샷으로 기록된다.</li>
      <li>그리고 현 브랜치가 새 커밋을 가리키게 한다.</li>
    </ul>
  </li>
  <li>git commit 하면 vim 편집기가 열리는데 (terminal에서)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">i</code>를 눌러서 <u>INSERT</u> 모드로 들어간다.</li>
      <li>commit 할 메세지를 입력 후</li>
      <li>ESC를 누른 후 다음 명령어를 입력하면 입력이 종료가 된다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">:q</code> 를 입력하면 저장 없이 종료한다.</li>
          <li><code class="language-plaintext highlighter-rouge">:q!</code> 를 입력하면 저장 없이 강제 종료한다.</li>
          <li><code class="language-plaintext highlighter-rouge">:wq</code> 를 입력하면 저장을 하고 종료한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="git-commit--m-message">git commit -m ‘message’</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-m</code>으로 커밋 메세지를 파라미터로 넘긴다.</li>
  <li>이렇게 입력하면 위 과정의 vim 편집기를 열어서 커밋 메세지를 적고 종료하는 과정을 거치지 않고도 바로 입력하여 넘길 수 있다.</li>
</ul>

<h2 id="git-commit--am-message">git commit -am ‘message’</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-am</code> 플래그를 주고 git add를 건너뛰고 바로 commit 한다.</li>
  <li>추가 설명 : 텍스트를 수정하고 <code class="language-plaintext highlighter-rouge">add</code> → <code class="language-plaintext highlighter-rouge">commit</code> 단계가 번거롭다면 이 명령어를 통해 add와 commit을 한 번에 할 수 있다.</li>
  <li>-a는 자동으로 add를 해주는데 한 번도 버전관리를 해주지 않은 파일은 add를 해주지 않는다.
    <ul>
      <li>새로 추가된 Untracked 파일이 없을 때만 사용할 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="git-reset">git reset</h2>
<ul>
  <li>되돌리는 명령어이다.</li>
  <li>HEAD 포인터를 옮기는 것과 관련돼 있고</li>
  <li>Staging Area(index)를 되돌릴 수 있고</li>
  <li>–hard 옵션을 주면 Working Directory도 되돌린다.</li>
  <li>–hard 옵션을 잘못 사용하면 작업물을 잃어버릴 수도 있으므로 명령을 잘 이해하고 사용해야 한다.</li>
</ul>

<p><img width="863" alt="image" src="https://user-images.githubusercontent.com/73566453/154850902-6e6b6dcc-beed-4df7-9bd6-605e6fa9d12f.png" /></p>

<h2 id="git-reset-hard">git reset –hard</h2>
<ul>
  <li>마지막 커밋 시점으로 되돌리기</li>
</ul>

<h2 id="git-rm">git rm</h2>
<ul>
  <li>Staging Area나 Working Directory에 있는 파일을 삭제하는 데 사용한다.</li>
  <li>git add 명령과 비슷하게 파일의 삭제를 하는 Stage 하는 기능이다.</li>
</ul>

<h2 id="git-mv">git mv</h2>
<ul>
  <li>파일을 옮기고 나서 새 파일에 git add 명령을 실행하고 이전 파일에는 git rm을 실행시켜주는 명령어이다.</li>
</ul>

<h2 id="git-clean">git clean</h2>
<ul>
  <li>Working Directory에서 필요 없는 파일을 삭제하는 명령이다.</li>
</ul>

<h1 id="branch와-merge">Branch와 Merge</h1>

<h2 id="git-branch">git branch</h2>
<ul>
  <li>로컬 브랜치들 보기</li>
</ul>

<h2 id="git-branch-브랜치이름">git branch 브랜치이름</h2>
<ul>
  <li>브랜치 생성</li>
</ul>

<h2 id="git-switch-브랜치이름">git switch 브랜치이름</h2>
<ul>
  <li>브랜치 이동</li>
</ul>

<h2 id="git-switch--c-브랜치이름">git switch -c 브랜치이름</h2>
<ul>
  <li>브랜치를 생성시키면서 이동까지 함</li>
</ul>

<h2 id="git-branch--m-기존브랜치명-새브랜치명">git branch -m 기존브랜치명 새브랜치명</h2>
<ul>
  <li>브랜치 이름 변경</li>
</ul>

<h2 id="git-branch--d-브랜치이름">git branch -d 브랜치이름</h2>
<ul>
  <li>브랜치 삭제</li>
</ul>

<h2 id="git-merge">git merge</h2>
<ul>
  <li>다른 브랜치를 현재 Checkout된 브랜치에 Merge하는 명령이다.</li>
  <li>Merge하고 나서 현재 브랜치가 Merge된 결과를 가리키도록 옮긴다.</li>
  <li>예를 들면 main, 브랜치2, 브랜치3이 있는데 main과 브랜치2를 합치고 싶을 때 main에서 <code class="language-plaintext highlighter-rouge">git merge 브랜치2</code> 명령어를 입력하면
main브랜치에 브랜치2가 병합이 된다.</li>
</ul>

<p><img width="818" alt="image" src="https://user-images.githubusercontent.com/73566453/155147102-2376b19b-83db-4fdc-a2fe-0678834a25ae.png" /></p>

<h3 id="rebase와-merge의-차이">rebase와 merge의 차이</h3>
<p>rebase는 히스토리에 브랜치 흔적이 남지 않지만 merge는 브랜치의 흔적이 남는다.<br />
진행하는 프로젝트에 따라 브랜치의 흔적이 필요하다면 merge를, 히스토리가 깔끔해야 한다면 rebase를 사용하는 것이 좋다.</p>

<h2 id="git-log">git log</h2>
<ul>
  <li>커밋 히스토리 보기</li>
  <li>프로젝트 히스토리를 시간의 역순으로 보여준다.</li>
  <li>넘겨준 Ref를 따라 히스토리를 보여주는데 Ref를 한 개가 아니라 여러 개 넘길 수도 있다.</li>
</ul>

<p><img width="1187" alt="스크린샷 2022-02-21 오전 12 26 29" src="https://user-images.githubusercontent.com/73566453/154850152-d9d380dd-b049-420c-a429-aec5706cf1ca.png" /></p>

<h1 id="patch-하기">Patch 하기</h1>

<h2 id="git-rebase">git rebase</h2>
<ul>
  <li>check-pick을 여러 번 실행해 주는 것과 같다.</li>
  <li>연결된 커밋을 그 순서대로 한방에 Cherry-pick 해온다.
    <blockquote>
      <p>어후 <code class="language-plaintext highlighter-rouge">rebase</code>는 아직 복잡해서 더 공부해야 할 거 같다… rebase를 하고 다시 merge를 하고….</p>
    </blockquote>
  </li>
</ul>

<h2 id="git-revert">git revert</h2>
<ul>
  <li>git cherry-pick 명령의 반대로 볼 수 있다.</li>
  <li>해당 커밋을 되돌리는 커밋을 새로 생성한다.</li>
  <li>되돌리고 싶은 커밋의 해시코드를 입력해주면 된다. (<code class="language-plaintext highlighter-rouge">git log</code>에서 확인해 볼 수 있음)</li>
  <li><code class="language-plaintext highlighter-rouge">git revert 해시코드</code>를 입력하면 commit을 입력할 때 뜨는 편집기가 뜨는데 <code class="language-plaintext highlighter-rouge">:wq</code>로 저장하고 나오면 된다.</li>
  <li><span style="color:red">협업할 때는 reset보다 revert를 사용하는 게 좋다!!!</span></li>
</ul>

<p><br /></p>

<blockquote>
  <p>이 외의 명령어는 조금 더 공부하고 차차 추가하는 걸로!</p>
</blockquote>]]></content><author><name>민경</name></author><category term="Git &amp; Github" /><category term="Git 기초" /><category term="Git 명령어" /><category term="Pro Git" /><summary type="html"><![CDATA[설치와 설정]]></summary></entry><entry><title type="html">Markdown 문법 정리</title><link href="http://localhost:4000/markdown/markdown/" rel="alternate" type="text/html" title="Markdown 문법 정리" /><published>2022-02-18T00:00:00+09:00</published><updated>2022-02-18T00:00:00+09:00</updated><id>http://localhost:4000/markdown/markdown</id><content type="html" xml:base="http://localhost:4000/markdown/markdown/"><![CDATA[<h2 id="제목-h1h6">제목 (h1~h6)</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># h1</span>
<span class="gu">## h2</span>
<span class="gu">### h3</span>
<span class="gu">#### h4</span>
<span class="gu">##### h5</span>
<span class="gu">###### h6</span>
</code></pre></div></div>

<h1 id="h1">h1</h1>
<h2 id="h2는-구분선이-생긴다">h2는 구분선이 생긴다</h2>
<h3 id="h3">h3</h3>
<h4 id="h4">h4</h4>
<h5 id="h5">h5</h5>
<h6 id="h6">h6</h6>

<h2 id="순서-있는-리스트">순서 있는 리스트</h2>
<ol>
  <li>첫번째</li>
  <li>두번째</li>
  <li>세번째</li>
  <li>첫번째</li>
  <li>두번째</li>
  <li>세번째</li>
</ol>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> 첫번째
<span class="p">1.</span> 두번째
<span class="p">1.</span> 세번째
<span class="p">1.</span> 첫번째
<span class="p">2.</span> 두번째
<span class="p">3.</span> 세번째
</code></pre></div></div>
<p>숫자에 상관없이 이어지는 거 같다.</p>

<h2 id="순서-없는-리스트">순서 없는 리스트</h2>
<ul>
  <li>순서 없는
    <ul>
      <li>리스트
        <ul>
          <li>이 밑으로는
            <ul>
              <li>어떤 기호를 써도
                <ul>
                  <li>네모로 나온다
                    <ul>
                      <li>순서 없는
                        <ul>
                          <li>리스트</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">+</span> 순서 없는
<span class="p">    -</span> 리스트
<span class="p">      *</span> 이 밑으로는
<span class="p">        +</span> 어떤 기호를 써도
<span class="p">          -</span> 네모로 나온다
<span class="p">            *</span> 순서 없는
<span class="p">              +</span> 리스트
</code></pre></div></div>

<h2 id="텍스트">텍스트</h2>

<h3 id="볼드체">볼드체</h3>
<p><strong>볼드(진하게)</strong><br />
<strong>강조된 텍스트입니다</strong></p>

<h3 id="취소선">취소선</h3>
<p><del>취소선 텍스트</del></p>

<h3 id="이탤릭체">이탤릭체</h3>
<p><em>이탤릭체(기울여서)</em><br />
<em>기울여진 텍스트입니다</em></p>

<h3 id="밑줄">밑줄</h3>
<p><u>밑줄 텍스트</u></p>

<h3 id="여러가지-섞어서">여러가지 섞어서</h3>
<p><strong><em>굵고 기울여진 텍스트</em></strong><br />
<del><strong><em><u>취소선 + 굵고 + 기울여진 텍스트</u></em></strong></del></p>

<h3 id="텍스트-색상-변경-인라인-태그-사용">텍스트 색상 변경 (인라인 태그 사용)</h3>
<p><span style="color:blue">파란 글씨입니다.</span><br />
<span style="color:red">빨간 글씨입니다.</span><br />
<span style="color:yellow">노란 글씨입니다.</span><br />
<span style="color:green">초록 글씨입니다.</span></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">### 볼드체</span>
<span class="gs">__볼드(진하게)__</span>  
<span class="gs">**강조된 텍스트입니다**</span>

<span class="gu">### 취소선</span>
~~취소선 텍스트~~  

<span class="gu">### 이탤릭체</span>
<span class="ge">_이탤릭체(기울여서)_</span>  
<span class="ge">*기울여진 텍스트입니다*</span>

<span class="gu">### 밑줄</span>
<span class="nt">&lt;u&gt;</span>밑줄 텍스트<span class="nt">&lt;/u&gt;</span>  

<span class="gu">### 여러가지 섞어서</span>
<span class="gs">***굵고 기울여진 텍스트**</span><span class="err">*</span>  
~~<span class="gs">***&lt;u&gt;취소선 + 굵고 + 기울여진 텍스트&lt;/u&gt;**</span><span class="err">*</span>~~

<span class="gu">### 텍스트 색상 변경 (인라인 태그 사용)</span>
<span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:blue"</span><span class="nt">&gt;</span>파란 글씨입니다.<span class="nt">&lt;/span&gt;</span>  
<span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:red"</span><span class="nt">&gt;</span>빨간 글씨입니다.<span class="nt">&lt;/span&gt;</span>  
<span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:yellow"</span><span class="nt">&gt;</span>노란 글씨입니다.<span class="nt">&lt;/span&gt;</span>  
<span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:green"</span><span class="nt">&gt;</span>초록 글씨입니다.<span class="nt">&lt;/span&gt;</span>  
</code></pre></div></div>

<h2 id="인용문">인용문</h2>

<blockquote>
  <p>여기는</p>
  <blockquote>
    <p>기억저장소</p>
    <blockquote>
      <p>입니다</p>
      <blockquote>
        <p>어디까지 들여쓰기가 될까</p>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <p>여기는 기억저장소 입니다.<br />
여기는 기억저장소</p>
</blockquote>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; 여기는</span>
<span class="gt">&gt;&gt; 기억저장소</span>
<span class="gt">&gt;&gt;&gt; 입니다</span>
<span class="gt">&gt;&gt;&gt;&gt; 어디까지 들여쓰기가 될까</span>
<span class="gt">
&gt; 여기는 기억저장소 입니다.  </span>
<span class="gt">&gt; 여기는 기억저장소</span>
</code></pre></div></div>

<h2 id="링크">링크</h2>

<h3 id="1-설명어를-클릭하면-url로-이동">1. ‘설명어’를 클릭하면 URL로 이동</h3>
<p><a href="https://wkdalsrud.github.io" title="마우스를 올려놓으면 말풍선이 나옵니다.">기억저장소</a></p>
<h3 id="2-url을-보여주고-바로-연결">2. URL을 보여주고 바로 연결</h3>
<p><a href="https://wkdalsrud.github.io/">https://wkdalsrud.github.io/</a></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">### 1. '설명어'를 클릭하면 URL로 이동  </span>
<span class="p">[</span><span class="nv">기억저장소</span><span class="p">](</span><span class="sx">https://wkdalsrud.github.io</span> <span class="nn">"마우스를 올려놓으면 말풍선이 나옵니다."</span><span class="p">)</span>  
<span class="gu">### 2. URL을 보여주고 바로 연결  </span>
<span class="nv">&lt;https://wkdalsrud.github.io/&gt;</span>
</code></pre></div></div>

<h2 id="표">표</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">항목입니다</th>
      <th style="text-align: center">가격입니다</th>
      <th style="text-align: right">개수입니다</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">왼쪽정렬</td>
      <td style="text-align: center">가운데정렬</td>
      <td style="text-align: right">오른쪽정렬</td>
    </tr>
    <tr>
      <td style="text-align: left">과자</td>
      <td style="text-align: center">900원</td>
      <td style="text-align: right">20개</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: right">항목입니다</th>
      <th style="text-align: center">가격입니다</th>
      <th style="text-align: left">개수입니다</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">오른쪽정렬</td>
      <td style="text-align: center">가운데정렬</td>
      <td style="text-align: left">왼쪽정렬</td>
    </tr>
    <tr>
      <td style="text-align: right">과자</td>
      <td style="text-align: center">900원</td>
      <td style="text-align: left">20개</td>
    </tr>
  </tbody>
</table>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| 항목입니다 | 가격입니다 | 개수입니다 | → 제목
|:---|:----:|----:| → 제목과 내용을 분리해 줌
| 왼쪽정렬 | 가운데정렬 | 오른쪽정렬 | → 내용
| 과자 | 900원 | 20개 |

| 항목입니다 | 가격입니다 | 개수입니다 |
|---:|:----:|:----|
| 오른쪽정렬 | 가운데정렬 | 왼쪽정렬 |
| 과자 | 900원 | 20개 |
</code></pre></div></div>

<h2 id="코드">코드</h2>

<p>``` 코드 앞 뒤로 이 기호를 적고 사용할 언어를 앞쪽에 적으면 언어에 맞게 하이라이팅이 된다
<img src="/assets/images/Image_screenshot.png" alt="Image_screenshot" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="kt">double</span> <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이거는 <code class="language-plaintext highlighter-rouge">인라인</code> 코드</p>

<h2 id="할일-목록">할일 목록</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />체크 안됨</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />체크 됨</li>
</ul>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">-</span> [ ] 체크 안됨
<span class="p">-</span> [X] 체크 됨
</code></pre></div></div>

<h2 id="토글-목록">토글 목록</h2>

<details>
<summary>여기를 눌러주세요</summary>
<div>
    <p>div 태그 안에 내용을 입력하면 토글목록 안에 들어온다.</p>
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />체크 안됨</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />체크 됨</li>
    </ul>
  </div>
</details>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">-</span> [ ] 체크 안됨
<span class="p">-</span> [X] 체크 됨
</code></pre></div></div>

<h2 id="이미지-삽입">이미지 삽입</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">![</span><span class="nv">이미지 이름</span><span class="p">](</span><span class="sx">로컬경로</span> 또는 URL)
<span class="p">![</span><span class="nv">Image_screenshot</span><span class="p">](</span><span class="sx">/assets/images/Image_screenshot.png</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="버튼">버튼</h2>

<p><a href="#" class="btn--success">맨 위로 가는 버튼!</a></p>]]></content><author><name>민경</name></author><category term="Markdown" /><category term="markdown" /><category term="문법" /><summary type="html"><![CDATA[제목 (h1~h6)]]></summary></entry></feed>