I"S]<p class="notice--warning">인프런에 있는 Rookiss님의 <strong>[C#과 유니티로 만드는 MMORPG 게임 개발 시리즈] Part2: 자료구조와 알고리즘</strong> 강의를 듣고 정리한 필기입니다. 😀<br />
<a href="(https://www.inflearn.com/course/유니티-MMORPG-유니티-개발-part2#)">🌜 강의 들으러 가기 Click</a></p>

<h1 id="chapter-4-그래프">Chapter 4. 그래프</h1>

<h2 id="-그래프-순회-방법">🚖 그래프 순회 방법</h2>

<p>배열이나 리스트는 선형 자료 구조이므로 원소들을 차례대로 순회하면 되지만 그래프는 선형 자료 구조가 아닌, 한 정점에 연결된 정점들이 여러개일 수 있으므로 연결된 정점들 중 다음엔 어떤 정점을 탐색할지 다르므로 순회 방법이 다양하다. 대표적으로 두 가지가 있다.</p>

<ul>
  <li>그래프 순회 방법
    <ol>
      <li><strong>DFS</strong> (Depth First Search 깊이 우선 탐색)
        <ul>
          <li>들어갈 수 있다면 무조건 들어가며 깊이 들어감</li>
          <li>끝까지 들어가야 다시 돌아 옴</li>
        </ul>
      </li>
      <li><strong>BFS</strong> (Breadth First Search 너비 우선 탐색)</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h2 id="-dfs">🚖 DFS</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/95181033-b46b8e00-07fd-11eb-86bd-f4b5c827d8b2.png" alt="image" /></p>

<h3 id="1️⃣-배열로-구현된-그래프-dfs-순회">1️⃣ 배열로 구현된 그래프 DFS 순회</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">Graph</span>
    <span class="p">{</span>
        <span class="kt">int</span><span class="p">[,]</span> <span class="n">adj</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
        <span class="p">};</span>

        <span class="kt">bool</span><span class="p">[]</span> <span class="n">visited</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="m">6</span><span class="p">];</span> <span class="c1">// 방문 체크를 위해</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">)</span>  <span class="c1">// 순회 시작 위치가 인수로 들어 옴</span>
        <span class="p">{</span>
            <span class="c1">// 1) now 부터 방문 하고</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
            <span class="n">visited</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

            <span class="c1">// 2) now 와 연결된 정점들을 하나씩 확인해서, [ 아직 미 방문 상태라면 ] 방문한다.</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">next</span> <span class="p">&lt;</span> <span class="m">6</span><span class="p">;</span> <span class="n">next</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">now</span><span class="p">,</span> <span class="n">next</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>  <span class="c1">// 연결 되어 있지 않으면 스킵</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">next</span><span class="p">])</span>      <span class="c1">// 이미 방문 했으면 스킵</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="nf">DFS</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>   <span class="c1">// 재귀 (깊이 들어 감)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Graph</span> <span class="n">graph</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Graph</span><span class="p">();</span>
            <span class="n">graph</span><span class="p">.</span><span class="nf">DFS</span><span class="p">(</span><span class="m">3</span><span class="p">);</span>  <span class="c1">// 3 0 1 2 4 5</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>일단 방문 체크를 한다.</li>
  <li>연결이 되어 있으며, <u>아직 방문하지 않은 곳</u>이라면 깊이 들어가 방문한다.
    <ul>
      <li>배열은 연결 되어 있지 않은 정보도 포함되어 있기 때문에 (<code class="language-plaintext highlighter-rouge">0</code>) 연결 되어 있는지 즉 갈 수 있는지를 체크해주어야 한다.</li>
      <li>갈 수 있는 곳이라면 깊이 들어간다. 👉 재귀 함수 호출</li>
    </ul>
  </li>
</ol>

<p><code class="language-plaintext highlighter-rouge">DFS(3)</code> 3 에서 DFS 순회를 시작했다면 3 0 1 2 4 5 순으로 방문하게 될 것이다.</p>

<p><br /></p>

<h3 id="2️⃣-리스트로-구현된-그래프-dfs-순회">2️⃣ 리스트로 구현된 그래프 DFS 순회</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">Graph</span>
    <span class="p">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;[]</span> <span class="n">adj2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;[]</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">3</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">1</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">4</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">4</span> <span class="p">},</span>
        <span class="p">};</span>

        <span class="kt">bool</span><span class="p">[]</span> <span class="n">visited</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="m">6</span><span class="p">];</span>
        
        <span class="k">public</span> <span class="k">void</span> <span class="nf">DFS2</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// 1) now 부터 방문 하고</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
            <span class="n">visited</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

            <span class="c1">// 2) now 와 연결된 정점들을 하나씩 확인해서, [ 아직 미 방문 상태라면 ] 방문한다.</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="k">in</span> <span class="n">adj2</span><span class="p">[</span><span class="n">now</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">next</span><span class="p">])</span>      <span class="c1">// 이미 방문 했으면 스킵</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="nf">DFS2</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Graph</span> <span class="n">graph</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Graph</span><span class="p">();</span>
            <span class="n">graph</span><span class="p">.</span><span class="nf">DFS2</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>  <span class="c1">// 0 1 2 3 4 5</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>일단 방문 체크를 한다.</li>
  <li><u>아직 방문하지 않은 곳</u>이라면 깊이 들어가 방문한다.
    <ul>
      <li>리스트는 나와 연결 되어 있는 정보만 갖고 있기 때문에 연결 되어 있는지를 체크할 필요는 없다.</li>
      <li>갈 수 있는 곳이라면 깊이 들어간다. 👉 재귀 함수 호출</li>
    </ul>
  </li>
</ol>

<p><code class="language-plaintext highlighter-rouge">DFS2(0)</code> 3 에서 DFS 순회를 시작했다면 0 1 2 3 4 5 순으로 방문하게 될 것이다.</p>

<p><br /></p>

<h3 id="3️⃣-연결이-끊겨-있는-부분이-있는-그래프-dfs-순회">3️⃣ 연결이 끊겨 있는 부분이 있는 그래프 DFS 순회</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/95186420-efbd8b00-0804-11eb-99b4-818f57c3590f.png" alt="image" /></p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kt">int</span><span class="p">[,]</span> <span class="n">adj</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
        <span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">adj[3][4]</code>, <code class="language-plaintext highlighter-rouge">adj[4][3]</code> 값을 0 으로 바꾸어 3, 4 정점간의 연결을 끊어 준다.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">Graph</span>
    <span class="p">{</span>
        <span class="kt">int</span><span class="p">[,]</span> <span class="n">adj</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
        <span class="p">};</span>

        <span class="kt">bool</span><span class="p">[]</span> <span class="n">visited</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="m">6</span><span class="p">];</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">SearchAll</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">visited</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="m">6</span><span class="p">];</span>  <span class="c1">// 전부 false로 초기화</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">now</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">now</span> <span class="p">&lt;</span> <span class="m">6</span><span class="p">;</span> <span class="n">now</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span>
                    <span class="nf">DFS</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Graph</span> <span class="n">graph</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Graph</span><span class="p">();</span>

            <span class="n">graph</span><span class="p">.</span><span class="nf">SearchAll</span><span class="p">();</span>  <span class="c1">// 0 1 2 3 4 5</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">now = 0</code> 👉 DFS(0)
    <ul>
      <li>이 호출 하나가 끝났을 땐, visited[0], visited[1], visited[2], visited[3] 의 값은 <code class="language-plaintext highlighter-rouge">true</code>로 바뀌어 있다.
        <ul>
          <li>0 을 시작으로 깊이 들어가 0, 1, 2, 3 정점을 모두 방문했기 때문.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">now</code> 값이 1, 2, 3 일땐 <em>if (visited[now] == false)</em> 걸리지 않는다. (생각보다 if문이 자주 호출되진 않음. DFS(0) 호출 한번으로 0, 1, 2, 3 을 모두 방문하게 되기 때문)</li>
            </ul>
          </li>
          <li>이처럼 연결만 되어 있다면 정점 하나로 연결된 모든 정점들을 DFS 순회법으로 전부 방문할 수 있다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">now = 4</code> 👉 DFS(4)
    <ul>
      <li>이 호출 하나로 visited[4], visited[5] 방문</li>
    </ul>
  </li>
  <li>이처럼 연결이 끊겨 있는 그래프를 전부 방문하기 위해 이와 같은 방법을 사용할 수 있다.</li>
  <li>한번의 DFS 순회로 연결 되어 있는 노드는 다 방문할 수 있기 때문에 <em>if (visited[now] == false)</em> 방문 되지 않은 정점을 검사한다는 의미는, 연결이 끊겨 있는 곳이 있을 것을 대비해서다.</li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET