I"?8<p class="notice--warning">홍정모 교수님의 강의 <strong>홍정모의 따라하며 배우는 C언어(부록)</strong> 를 듣고 정리한 필기입니다. 😀</p>

<h1 id="chapter-4-스택">Chapter 4. 스택</h1>

<h2 id="-c언어로-스택-구현하기-배열-사용">🚀 C언어로 스택 구현하기 (배열 사용)</h2>

<h3 id="elementh">📜element.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span><span class="n">element</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="stackh">📜stack.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"element.h"</span><span class="cp">
#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span>
<span class="cp">#define MAX_STACK_SIZE 5
</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">stack</span>
<span class="p">{</span>
	<span class="n">element</span> <span class="n">items</span><span class="p">[</span><span class="n">MAX_STACK_SIZE</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">top</span><span class="p">;</span>
<span class="p">}</span><span class="n">Stack</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">);</span>
<span class="kt">bool</span> <span class="nf">IsFull</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">);</span>
<span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">,</span> <span class="n">element</span> <span class="n">item</span><span class="p">);</span>
<span class="n">element</span> <span class="nf">Pop</span><span class="p">(</span><span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="stackc">📜stack.c</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"stack.h"</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">stack</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="c1">// allocate memory if dynamic array is used;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">IsFull</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">stack</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">==</span> <span class="n">MAX_STACK_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="k">else</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">stack</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">==</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="k">else</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">,</span> <span class="n">element</span> <span class="n">item</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">IsFull</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Stack is full. Cannot add.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="c1">// memcpy(&amp;stack-&gt;items[++stack-&gt;top], &amp;item, sizeof(item));</span>
		<span class="n">stack</span><span class="o">-&gt;</span><span class="n">items</span><span class="p">[</span><span class="o">++</span><span class="n">stack</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="n">element</span> <span class="nf">Pop</span><span class="p">(</span><span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">IsEmpty</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Stack is empty. Cannot remove.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">element</span> <span class="n">temp</span> <span class="o">=</span> <span class="p">{</span> <span class="o">-</span><span class="mi">1</span> <span class="p">};</span> <span class="c1">// -1을 반환하기 위한 dummy</span>
		<span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">stack</span><span class="o">-&gt;</span><span class="n">items</span><span class="p">[</span><span class="n">stack</span><span class="o">-&gt;</span><span class="n">top</span><span class="o">--</span><span class="p">];</span>
<span class="p">}</span>

</code></pre></div></div>

<p><br /></p>

<h3 id="mainc">📜main.c</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_stack</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">*</span> <span class="n">stack</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"Stack : "</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">IsEmpty</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Empty"</span><span class="p">);</span>
	<span class="k">else</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">stack</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">stack</span><span class="o">-&gt;</span><span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">element</span> <span class="nf">get_element</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">element</span> <span class="n">new_element</span><span class="p">;</span>
	<span class="n">new_element</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">new_element</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Stack</span> <span class="n">my_stack</span><span class="p">;</span>

	<span class="n">Initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span>

	<span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">,</span> <span class="n">get_element</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span> <span class="c1">// 1</span>

	<span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">,</span> <span class="n">get_element</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span> <span class="c1">// 1 3</span>

	<span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">,</span> <span class="n">get_element</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span> <span class="c1">// 1 3 4</span>

	<span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">,</span> <span class="n">get_element</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span> <span class="c1">// 1 3 4 5</span>

	<span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">,</span> <span class="n">get_element</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span> <span class="c1">// 1 3 4 5 6</span>

	<span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">,</span> <span class="n">get_element</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>
	<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span> <span class="c1">// 1 3 4 5 6 (꽉차서 7은 안들어감)</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_STACK_SIZE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Pop : %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">Pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">).</span><span class="n">data</span><span class="p">);</span>
		<span class="n">print_stack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_stack</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/109417266-37d48880-7a06-11eb-9a37-316cc01c7b4d.png" alt="image" /></p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET