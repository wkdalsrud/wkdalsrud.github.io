I"jB<h2 id="-난이도">🚀 난이도</h2>

<blockquote>
  <p>💚 플래티넘 2</p>
</blockquote>

<p><br /></p>

<h2 id="-문제">🚀 문제</h2>

<blockquote>
  <p><a href="https://www.acmicpc.net/problem/9250">https://www.acmicpc.net/problem/9250</a></p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/115105529-7f08df80-9f9a-11eb-948b-7aa993305cad.png" alt="image" /></p>

<p><br /></p>

<h2 id="-내-풀이">🚀 내 풀이</h2>

<h3 id="-아호-코라식-으로-풀이-">🔥 ‘아호-코라식’ 으로 풀이 ⭕</h3>

<p>아호-코라식 알고리즘에 대해서는 <a href="https://ansohxxn.github.io/algorithm/ahocorasick/">(C++) 문자열 검색 알고리즘 : 아호-코라식(Aho-Corasick) 알고리즘</a> 👈 이 포스트에 자세히 설명해두었으니 참고 :) 제출했던 아래 코드는 아호-코라식 코드 그대로이다.</p>

<p>아호 코라식 알고리즘을 사용하면, 검색어의 개수가 \(k\) 개 일 때 하나의 텍스트 당 \(O(n + m_{1} + m_{2} + .. + m_{k})\) 의 선형 시간 복잡도만 소요 된다. 즉, 텍스트(아래 코드에선 <code class="language-plaintext highlighter-rouge">word[i]</code>)를 한번만 순회하면 되는 것이다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Trie</span> <span class="p">{</span>
<span class="nl">public:</span>
	<span class="kt">bool</span> <span class="n">isEnd</span><span class="p">;</span>
	<span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">Trie</span><span class="o">*&gt;</span> <span class="n">child</span><span class="p">;</span>
	<span class="n">Trie</span><span class="o">*</span> <span class="n">fail</span><span class="p">;</span>

	<span class="n">Trie</span><span class="p">()</span> <span class="o">:</span> <span class="n">isEnd</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="n">fail</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">)</span> <span class="p">{}</span>

	<span class="kt">void</span> <span class="n">Insert</span><span class="p">(</span><span class="n">string</span> <span class="n">pattern</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Trie</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">pattern</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
				<span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Trie</span><span class="p">;</span>
			<span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">isEnd</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">Fail</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// BFS + KMP</span>
		<span class="n">Trie</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
		<span class="n">queue</span><span class="o">&lt;</span><span class="n">Trie</span><span class="o">*&gt;</span> <span class="n">q</span><span class="p">;</span>

		<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>

		<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
			<span class="n">Trie</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
			<span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

			<span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">)</span> <span class="p">{</span>

				<span class="n">Trie</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">ch</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">root</span><span class="p">)</span>
					<span class="n">next</span><span class="o">-&gt;</span><span class="n">fail</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
				<span class="k">else</span> <span class="p">{</span>
					<span class="n">Trie</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">fail</span><span class="p">;</span>
					<span class="k">while</span> <span class="p">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">ch</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="o">==</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
						<span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">fail</span><span class="p">;</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">ch</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="o">!=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
						<span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">ch</span><span class="p">.</span><span class="n">first</span><span class="p">];</span>
					<span class="n">next</span><span class="o">-&gt;</span><span class="n">fail</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
				<span class="p">}</span>

				<span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">fail</span><span class="o">-&gt;</span><span class="n">isEnd</span><span class="p">)</span>
					<span class="n">next</span><span class="o">-&gt;</span><span class="n">isEnd</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

				<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="c1">// 검색어들이 모여 있는 트라이를 통해 탐색하며 word 의 부분 문자열과 일치하는 것을 처음으로 찾아내자마자 return true 하고 종료함</span>
<span class="kt">bool</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">string</span> <span class="n">word</span><span class="p">,</span> <span class="n">Trie</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">Trie</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">now</span> <span class="o">!=</span> <span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
			<span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">fail</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">!=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
			<span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">isEnd</span><span class="p">)</span>
			<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">//freopen("input.txt", "r", stdin);</span>

	<span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">patterns</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">patterns</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="n">Trie</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Trie</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="n">root</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="n">patterns</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="n">root</span><span class="o">-&gt;</span><span class="n">Fail</span><span class="p">();</span>

	<span class="kt">int</span> <span class="n">Q</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">Q</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">Q</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">Q</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">KMP</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">root</span><span class="p">))</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"YES"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="k">else</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"NO"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET