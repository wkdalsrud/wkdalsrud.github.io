I"0[<h1 id="이분탐색-징검다리">[이분탐색] 징검다리</h1>

<blockquote>
  <p>난이도 ⭐⭐⭐⭐</p>
</blockquote>

<h2 id="-문제">💛 문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/99357765-d1f94080-28ef-11eb-92ad-9670342ca341.png" alt="image" /></p>

<p><br /></p>

<h2 id="-풀이">💛 풀이</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">distance</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">rocks</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  
    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
    
    <span class="n">sort</span><span class="p">(</span><span class="n">rocks</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">rocks</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            
        <span class="kt">int</span> <span class="n">gap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">lastRock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">removeCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
                <span class="n">gap</span> <span class="o">=</span> <span class="n">distance</span> <span class="o">-</span> <span class="n">lastRock</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">gap</span> <span class="o">=</span> <span class="n">rocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">lastRock</span><span class="p">;</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="n">gap</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">)</span>
                <span class="n">removeCount</span><span class="o">++</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
                <span class="n">lastRock</span> <span class="o">=</span> <span class="n">rocks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">removeCount</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">)</span>
            <span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="이분-탐색">이분 탐색</h3>

<ol>
  <li><strong><em>고정 되어 정해져 있는 것은 무엇인지</em></strong> (비교할 대상이 된다.)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">n</code> 제거해야 하는 바위의 수</li>
    </ul>
  </li>
  <li><strong><em>무엇을 이분 탐색으로 찾을 것인가</em></strong> (<code class="language-plaintext highlighter-rouge">mid</code>로 업뎃 해 나갈 것)
    <ul>
      <li>‘각 지점 사이의 최소 간격’ 즉 바위간의 최소 간격.</li>
      <li>의 최대값</li>
    </ul>
  </li>
  <li><strong><em>찾으려고 하는 것이 속한 범위가 정렬이 되어 있는가</em></strong>
    <ul>
      <li>‘각 지점 사이의 최소 간격’의 범위의 최소값은 대충 <code class="language-plaintext highlighter-rouge">1</code> 로 상정하고 최대값은 대충 바위가 하나도 없어서 출발지점 ~ 도착지점 간의 거리인 <code class="language-plaintext highlighter-rouge">distance</code>로 정해놓는다.</li>
      <li><u>1 ~ distance 범위는 그 자체로 정렬이 되어 있다.</u> 우리가 찾고자 하는 답인 ‘각 지점 사이의 최소 간격’는 이 정렬된 범위 내에 있으므로 이분 탐색을 사용하여 답을 찾을 수 있다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<ul>
  <li>찾고자 하는 것은 <code class="language-plaintext highlighter-rouge">각 지점 사이의 최소 간격</code></li>
  <li>분할 기준이 되는 비교는 <code class="language-plaintext highlighter-rouge">제거해야할 바위 수</code>와 현재의 <code class="language-plaintext highlighter-rouge">mid</code>인 <code class="language-plaintext highlighter-rouge">각 지점 사이의 간격</code>을 기준으로 했을 때 제거 한 바위의 수를 비교.</li>
</ul>

<p><br /></p>

<blockquote>
  <p>모든 경우의 수를 검사하지 않는다. 우리가 찾고자 하는 답인 ‘각 지점 사이의 최소 간격’을 업다운 형식으로 범위를 좁혀 나가 찾을 뿐이다. 업 다운의 기준은 정해져 있는 현재의 거리가 <code class="language-plaintext highlighter-rouge">n</code>개 이하로 바위를 제거하는 것이 가능한 거리인지를 따지는 것이 된다. <code class="language-plaintext highlighter-rouge">n</code>개 이하로 최대한 바위를 적게 제거해야 하는 이유는 거리의 최소값들 중에 가장 최대값이 되는 제거 케이스를 찾아야 하기 때문에 최대한 바위를 적게 제거 해야 한다.</p>
</blockquote>

<ul>
  <li>문제에서 명확히 정해져 있는 것은 <code class="language-plaintext highlighter-rouge">n</code> 제거해야 하는 바위의 수.
    <ul>
      <li>⭐<u>현재 정해놓은 '각 지점 사이의 최소 간격'</u>인 <code class="language-plaintext highlighter-rouge">mid</code>를 기준으로 했을 때의 바위 제거 가능한 수를 <code class="language-plaintext highlighter-rouge">n</code>과 비교하여 범위를 업데이트 및 좁혀 나간다. 👉 <u>현재 정해둔 `mid`인 '각 지점 사이의 최소 간격' 보다 작은 간격의 바위는 제거하고 이 제거 횟수를 세자!</u> 그리고 다 세고 난 후에 <code class="language-plaintext highlighter-rouge">n</code>과 비교하자!
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
            <span class="n">gap</span> <span class="o">=</span> <span class="n">distance</span> <span class="o">-</span> <span class="n">lastRock</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">gap</span> <span class="o">=</span> <span class="n">rocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">lastRock</span><span class="p">;</span>
            
        <span class="k">if</span> <span class="p">(</span><span class="n">gap</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">)</span>
            <span class="n">removeCount</span><span class="o">++</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
            <span class="n">lastRock</span> <span class="o">=</span> <span class="n">rocks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>먼저 <code class="language-plaintext highlighter-rouge">rocks</code>를 정렬하여 바위의 위치들을 순서대로 정렬한다.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">sort</span><span class="p">(</span><span class="n">rocks</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">rocks</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</code></pre></div>            </div>
          </li>
          <li><code class="language-plaintext highlighter-rouge">rocks</code>를 통해 위치별로 순서대로 바위 사이의 간격을 구한다. (바위1위치 - 출발지), (바위2위치 ~ 바위1위치), … , (마지막바위위치 - 마지막에서두번재바위위치), (도착지 - 마지막바위위치) 이렇게 총 <code class="language-plaintext highlighter-rouge">rocks.size() + 1</code> 개의 간격을 구해야 한다. for 문은 <code class="language-plaintext highlighter-rouge">rocks.size() + 1</code> 번 돌아야 함
            <ul>
              <li><code class="language-plaintext highlighter-rouge">if (i == rocks.size())</code> 마지막 간격은 (도착지 - 마지막바위위치) 값인 <code class="language-plaintext highlighter-rouge">distance - lastRock</code>.</li>
              <li><code class="language-plaintext highlighter-rouge">else</code> 그 외의 간격은 모두 <code class="language-plaintext highlighter-rouge">rocks[i] - lastRock</code></li>
            </ul>
          </li>
          <li>바위를 제거해나갈 것이기 때문에 간격을 구할 때 제거 된 바위의 그 앞 바위를 위치를 뺄셈 해주어야 한다. 따라서 이전 바위 위치를 <code class="language-plaintext highlighter-rouge">lastRock</code> 변수에 저장한다.</li>
          <li><strong>바위 제거하는 기준</strong> 👉
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">if</span> <span class="p">(</span><span class="n">gap</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">)</span>
          <span class="n">removeCount</span><span class="o">++</span><span class="p">;</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">rocks</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
          <span class="n">lastRock</span> <span class="o">=</span> <span class="n">rocks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</code></pre></div>            </div>
            <ul>
              <li>위에서 구한 간격 <code class="language-plaintext highlighter-rouge">gap</code>이 <code class="language-plaintext highlighter-rouge">mid</code>보다 작다면
                <ul>
                  <li>간격을 넓혀야 하므로 바위를 제거한다. <code class="language-plaintext highlighter-rouge">removeCount</code> 증가. for문이 끝나면 현재 <code class="language-plaintext highlighter-rouge">mid</code>에서의 바위 제거 수가 <code class="language-plaintext highlighter-rouge">removeCount</code>에 최종적으로 담기게 되고 후에 이걸 <code class="language-plaintext highlighter-rouge">n</code>과 비교하여 이분 탐색 범위를 좁혀나갈 것이다.</li>
                  <li><code class="language-plaintext highlighter-rouge">lastRock</code>을 업데이트 하지 않는다. 현재 바위는 제거 되었으므로 <code class="language-plaintext highlighter-rouge">lastRock</code>은 그대로 이전 바위다. 현재 바위가 3바위라면 이전 바위는 2바위이고 다음 바위는 4바위 가 될텐데 4바위는 2바위와의 간격을 구하도록 <code class="language-plaintext highlighter-rouge">lastRock</code>을 업데이트 하지 않음.</li>
                </ul>
              </li>
              <li>위에서 구한 간격 <code class="language-plaintext highlighter-rouge">gap</code>이 <code class="language-plaintext highlighter-rouge">mid</code>보다 크거나 작다면
                <ul>
                  <li>바위를 제거하지 않는다. 따라서 <code class="language-plaintext highlighter-rouge">removeCount</code>을 업데이트 하지 않는다.</li>
                  <li><code class="language-plaintext highlighter-rouge">lastRock</code>을 업데이트 한다. 현재 바위는 제거 되지 않았으므로 다음 바위에서 간격을 잴 이전 바위를 현재 바위로 업데이트 한다.
                    <ul>
                      <li>단 <code class="language-plaintext highlighter-rouge">lastRock</code>을 현재 바위로 업데이트 하는 과정은 현재 순회 위치가 도착지가 아닐 때만 이루어져야 한다. 도착지일 땐 <code class="language-plaintext highlighter-rouge">i</code>가 <code class="language-plaintext highlighter-rouge">rocks.size()</code> 값이니까 이를 고려하지 않으면 <code class="language-plaintext highlighter-rouge">last = rocks[i]</code> 에서 런타임 에러 남 !</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>for문을 돌면서 구한 현재 정해놓은 ‘각 지점 사이의 최소 간격’인 <code class="language-plaintext highlighter-rouge">mid</code>를 기준으로 구한 바위 제거 수인 <code class="language-plaintext highlighter-rouge">removeCount</code>를 <code class="language-plaintext highlighter-rouge">n</code>과 비교하여 이분 탐색 범위를 업데이트 한다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">removeCount &gt; n</code> : 현재 정해놓은 <code class="language-plaintext highlighter-rouge">mid</code> 기준에서 <code class="language-plaintext highlighter-rouge">n</code> 제거해야 하는 바위 보다 <u>더 많이 제거 됐다면</u> 현재 정해놓은 바위 간격인 <code class="language-plaintext highlighter-rouge">mid</code>가 너무 크다는 것이다. 더 작은 범위로 좁혀야 한다.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span> <span class="p">(</span><span class="n">removeCount</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">)</span>
      <span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>            </div>
          </li>
          <li><code class="language-plaintext highlighter-rouge">removeCount &lt;= n</code> : 현재 정해놓은 <code class="language-plaintext highlighter-rouge">mid</code> 기준에서 <code class="language-plaintext highlighter-rouge">n</code> 제거해야 하는 바위 보다 <u>같거나 더 적게 제거했다면</u> <code class="language-plaintext highlighter-rouge">n</code> 더 적게 제거 했다면 더 큰 <code class="language-plaintext highlighter-rouge">mid</code>로 간격을 더 크게 해서 더 많이 제거할 수 있도록 해야 겠지만, <code class="language-plaintext highlighter-rouge">n</code>과 같다면 현재의 <code class="language-plaintext highlighter-rouge">mid</code>가 충분하다는 것이므로 정답 후보가 될 수 있다. 더 큰 최대값이 있을 수 있으므로, 즉 더 큰 <code class="language-plaintext highlighter-rouge">mid</code>에서도 정답이 있을 수 있으므로 더 큰 범위로 좁힌다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">answer</code>를 업데이트 한다. 현재의 <code class="language-plaintext highlighter-rouge">mid</code>가 답이 될 수도 있으므로.. 이게 최대값이 될 수 있다.
                <ul>
                  <li>예를 들어 현재 간격을 5로 해두었을 때 제거한 바위의 수가 <code class="language-plaintext highlighter-rouge">n</code>과 같았다면 5 가 정답이 될 수 있다. 그러나 5보다 더 큰 수에서도  제거한 바위의 수가 <code class="language-plaintext highlighter-rouge">n</code>과 같을 수 있기 때문에 일단 <code class="language-plaintext highlighter-rouge">answer</code>에 5를 저장 후 더 큰 값의 간격에서도 바위를 제거해 봐야 한다!
                    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">else</span>
<span class="p">{</span>
  <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>                    </div>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">answer</code>가 while문에서 한번도 업뎃되지 않을 경우를 대비하여 최소값인 <code class="language-plaintext highlighter-rouge">1</code>를 초기값으로 잡는다.
    <ul>
      <li>한번도 업뎃되지 않았다는건 1 ~ 59 범위의 모든 시간이 <code class="language-plaintext highlighter-rouge">n</code> 명을 심사하기엔 전부 부족했다는 것이다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>이 문제는 이분 탐색의 대표 코드에서 <code class="language-plaintext highlighter-rouge">mid == answer</code>가 되면 <code class="language-plaintext highlighter-rouge">return</code> 되어 빠져나오는 것과 다르게, 정확하게 딱 떨어지는 값을 찾는 것이 아닌 <code class="language-plaintext highlighter-rouge">n</code>개를 제거 할 수 있는 최소 간격 중에서도 최대 간격을 찾는 것이기 때문에 <code class="language-plaintext highlighter-rouge">answer</code>를 미리 업데이트 해둘 뿐, while을 탈출하는건 <code class="language-plaintext highlighter-rouge">start &gt; end</code> 가 될 때 뿐이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">mid == answer</code>가 되었다고해서 바로 while문을 빠져나와 <code class="language-plaintext highlighter-rouge">answer</code>를 리턴하면 안된다.</li>
    </ul>
  </li>
  <li>간격의 ‘최소값’을 <code class="language-plaintext highlighter-rouge">mid</code>로서 정해두는 것이고 그 <code class="language-plaintext highlighter-rouge">mid</code>를 기준으로 구한 바위 제거 수가 <code class="language-plaintext highlighter-rouge">n</code>과 일치하는 것들 중 최대값이 되는 <code class="language-plaintext highlighter-rouge">mid</code>를 구하는 것이 목표다.
    <ul>
      <li>이 문제에서 최소는 정해 두는 것이고, 최대값은 구해야 하는 것</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET