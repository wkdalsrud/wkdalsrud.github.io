I"V<p class="notice--warning">인프런에 있는 Rookiss님의 <strong>[C#과 유니티로 만드는 MMORPG 게임 개발 시리즈] Part2: 자료구조와 알고리즘</strong> 강의를 듣고 정리한 필기입니다. 😀<br />
<a href="(https://www.inflearn.com/course/유니티-MMORPG-유니티-개발-part2#)">🌜 강의 들으러 가기 Click</a></p>

<h1 id="chapter-4-그래프">Chapter 4. 그래프</h1>

<h2 id="-bfs">🚖 BFS</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/95191272-7a08ed80-080b-11eb-8cca-14ea5aa610c2.png" alt="image" /></p>

<blockquote>
  <p><u>가까운 순서대로 방문한다.</u></p>
</blockquote>

<ul>
  <li><u>출발 정점을 기준으로 가까운 순서대로 차례 차례 방문함.</u></li>
  <li>예를 들어 순회을 0 정점에서 시작한다면
    <ul>
      <li><code class="language-plaintext highlighter-rouge">0</code> 정점에서 거리 <strong>1</strong> (간선 1 개를 타야 갈 수 있는) 👉 <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">3</code></li>
      <li><code class="language-plaintext highlighter-rouge">0</code> 정점에서 거리 <strong>2</strong> (간선 2 개를 타야 갈 수 있는) 👉 <code class="language-plaintext highlighter-rouge">2</code>, <code class="language-plaintext highlighter-rouge">4</code></li>
      <li><code class="language-plaintext highlighter-rouge">0</code> 정점에서 거리 <strong>3</strong> (간선 3 개를 타야 갈 수 있는) 👉 <code class="language-plaintext highlighter-rouge">5</code></li>
      <li>최종적으로 BFS 순회는 0 1 3 2 4 5 순으로 방문하게 된다.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Queue</code> 큐로 구현한다.</p>
</blockquote>

<ul>
  <li>그 때, 그 때 방문하는 정점마다 가장 가까운 거리의 정점들을 큐에 넣는다.</li>
  <li>선입선출. 즉, 들어간지 오래된 정점부터 빠져나오게 된다.</li>
  <li>DFS 👉 다양한 용도에 사용 됨</li>
  <li>BFS 👉 거의 한 가지 용도로만 사용 된다! <u>⭐최단 거리 길 찾기⭐</u>&gt;</li>
</ul>

<p><br /></p>

<h3 id="bfs-코드">BFS 코드</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Excercise</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Graph</span>
    <span class="p">{</span>
        <span class="kt">int</span><span class="p">[,]</span> <span class="n">adj</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
        <span class="p">};</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">BFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">bool</span><span class="p">[]</span> <span class="n">found</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="m">6</span><span class="p">];</span>  <span class="c1">// false로 초기화 되어 있음</span>

            <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">q</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
            <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
            <span class="n">found</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// 1. 방문</span>
                <span class="kt">int</span> <span class="n">now</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">Dequeue</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>

                <span class="c1">// 2. 나와 가까운 정점들 중 방문하지 않은 애가 있다면 큐에 추가하여 예약</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">next</span> <span class="p">&lt;</span> <span class="m">6</span><span class="p">;</span> <span class="n">next</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">now</span><span class="p">,</span> <span class="n">next</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>  <span class="c1">// 연결 되어 있지 않으면 스킵</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">next</span><span class="p">])</span>  <span class="c1">// 이미 방문한 애라면 스킵</span>
                        <span class="k">continue</span><span class="p">;</span>
                    
                    <span class="c1">// 예약</span>
                    <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
                    <span class="n">found</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Graph</span> <span class="n">graph</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Graph</span><span class="p">();</span>
            <span class="n">graph</span><span class="p">.</span><span class="nf">BFS</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>  <span class="c1">// 0 1 3 2 4 5</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>큐에 다음에 방문할 정점들을 추가한다. 즉, 다음에 방문할 정점들을 순서대로 예약하는 것.</p>
</blockquote>

<ul>
  <li>아래 과정을 반복한다.
    <ul>
      <li>1️⃣ 방문 <em>int now = q.Dequeue();</em>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">now</code> 예약 큐에서 들어간지 가장 오래된 정점을 꺼내온다.</li>
        </ul>
      </li>
      <li>2️⃣ 현재 방문하고 있는 정점 <code class="language-plaintext highlighter-rouge">now</code>가 앞으로 방문할 수 있는 정점들을 큐에 넣어 예약하기
        <ul>
          <li>모든 정점들을 검사한다. (<code class="language-plaintext highlighter-rouge">next</code>)
            <ul>
              <li><code class="language-plaintext highlighter-rouge">now</code>와 연결 되어 있는 곳이고 and 아직 방문하지 않는 정점이라면
                <ul>
                  <li>해당 정점 <code class="language-plaintext highlighter-rouge">next</code>를 다음에 방문할 수 있도록 큐에 넣어 예약한다.</li>
                  <li><code class="language-plaintext highlighter-rouge">found</code> 로 한번이라도 예약된 적이 있다는 것을 체크하기</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>출발지를 기점으로 거리 순서대로 가까운 정점들을 차례대로 방문하게 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">graph.BFS(0)</code> 👉 0 1 3 2 4 5 순으로 방문</li>
</ul>

<p><br /></p>

<h3 id="bfs-순회한-노드들로부터-부모-거리-정보-얻기">BFS 순회한 노드들로부터 부모, 거리 정보 얻기</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Excercise</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Graph</span>
    <span class="p">{</span>
        <span class="kt">int</span><span class="p">[,]</span> <span class="n">adj</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">},</span>
            <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">},</span>
        <span class="p">};</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">BFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">bool</span><span class="p">[]</span> <span class="n">found</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="m">6</span><span class="p">];</span>  <span class="c1">// 한번이라도 예약된적이 있는지 여부</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">parent</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">];</span>  <span class="c1">// 내 부모가 누구인지</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">distance</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">6</span><span class="p">];</span> <span class="c1">// 내가 오기까지 얼마의 거리가 걸렸는지</span>

            <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">q</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
            <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
            <span class="n">found</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">parent</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="p">=</span> <span class="n">start</span><span class="p">;</span>  <span class="c1">// 출발지는 자기 자신이 부모라고 하자.</span>
            <span class="n">distance</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// 1. 방문</span>
                <span class="kt">int</span> <span class="n">now</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">Dequeue</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>

                <span class="c1">// 2. 나와 가까운 정점들 중 방문하지 않은 애가 있다면 큐에 추가하여 예약</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">next</span> <span class="p">&lt;</span> <span class="m">6</span><span class="p">;</span> <span class="n">next</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">now</span><span class="p">,</span> <span class="n">next</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>  <span class="c1">// 연결 되어 있지 않으면 스킵</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">next</span><span class="p">])</span>  <span class="c1">// 이미 한번이라도 예약된적이 있는 애라면 스킵</span>
                        <span class="k">continue</span><span class="p">;</span>
                    
                    <span class="c1">// 예약</span>
                    <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
                    <span class="n">found</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="n">parent</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="n">now</span><span class="p">;</span>
                    <span class="n">distance</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Graph</span> <span class="n">graph</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Graph</span><span class="p">();</span>
            <span class="n">graph</span><span class="p">.</span><span class="nf">BFS</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>  <span class="c1">// 0 1 3 2 4 5</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">found</code> 👉 한번이라도 예약된적이 있는지</li>
  <li><code class="language-plaintext highlighter-rouge">parent</code> 👉 해당 인덱스에 대응하는 정점의 부모가 누구인지</li>
  <li><code class="language-plaintext highlighter-rouge">distance</code> 👉 출발지로부터 해당 인덱스에 대응하는 정점까지의 거리</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예약</span>
<span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
<span class="n">found</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="n">parent</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="n">now</span><span class="p">;</span>
<span class="n">distance</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="p">=</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>방문할 수 있는 정점 <code class="language-plaintext highlighter-rouge">next</code> 을 큐에 예약할 때 <code class="language-plaintext highlighter-rouge">parent</code>, <code class="language-plaintext highlighter-rouge">distance</code>도 함게 업뎃
    <ul>
      <li><code class="language-plaintext highlighter-rouge">next</code>의 부모는 <code class="language-plaintext highlighter-rouge">now</code> (<code class="language-plaintext highlighter-rouge">now</code>로부터 연결 정점을 찾은 것이므로)</li>
      <li><code class="language-plaintext highlighter-rouge">start</code>로부터 <code class="language-plaintext highlighter-rouge">next</code>까지의 거리는 <code class="language-plaintext highlighter-rouge">now</code>까지의 거리인 <code class="language-plaintext highlighter-rouge">distance[now]</code>에서 1 더한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">parent</code> 👉 0 0 1 0 3 4
    <ul>
      <li>0 정점 부모 - 0</li>
      <li>1 정점 부모 - 0</li>
      <li>2 정점 부모 - 1</li>
      <li>3 정점 부모 - 0</li>
      <li>4 정점 부모 - 3</li>
      <li>5 정점 부모 - 4</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">distance</code> 👉 0 1 2 1 2 3
    <ul>
      <li>거리 0 - 출발지인 정점 0</li>
      <li>거리 1 - 정점 1, 정점 3</li>
      <li>거리 2 - 정점 2, 정점 4</li>
      <li>거리 3 - 정점 5</li>
    </ul>
  </li>
</ul>

<p><u>이처럼 BFS를 통해 해당 정점까지의 최단 거리를 정보를 담을 수 있다.</u> 👉 최단 거리 길 찾기에 사용 됨.</p>

<p><br /></p>

<h2 id="-bfs-를-사용한-미로-길-찾기">🚖 BFS 를 사용한 미로 길 찾기</h2>

<blockquote>
  <p>BFS 는 거의 한 가지 용도로만 사용 된다! <u>⭐최단 거리 길 찾기⭐</u>&gt;</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/95012093-90c70d00-0670-11eb-9389-fa91bdccf27d.png" alt="image" /></p>

<p><strong>미로의 타일 또한 그래프로 나타낼 수 있다.</strong> 타일 하나 하나를 정점(Vertex)으로 보고, 현재 타일로부터 해당 타일이 갈 수 있는 타일이라면 연결(Edge) 되는 것으로 표현할 수 있고, 갈 수 없는 벽이라면 연결이 되어 있지 않은 관계라고 생각해볼 수 있다.</p>

<h3 id="playercs---bfs">📜Player.cs - BFS</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="kt">int</span> <span class="n">posY</span><span class="p">,</span> <span class="kt">int</span> <span class="n">posX</span><span class="p">,</span> <span class="n">Board</span> <span class="n">board</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">PosX</span> <span class="p">=</span> <span class="n">posX</span><span class="p">;</span>
            <span class="n">PosY</span> <span class="p">=</span> <span class="n">posY</span><span class="p">;</span>
            <span class="n">_board</span> <span class="p">=</span> <span class="n">board</span><span class="p">;</span>

            <span class="nf">BFS</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">void</span> <span class="nf">BFS</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">deltaY</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">};</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">deltaX</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">};</span>

            <span class="kt">bool</span><span class="p">[,]</span> <span class="n">found</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">,</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">];</span>
            <span class="n">Pos</span><span class="p">[,]</span> <span class="n">parent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pos</span><span class="p">[</span><span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">,</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">];</span>

            <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Pos</span><span class="p">&gt;</span> <span class="n">q</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Pos</span><span class="p">&gt;();</span>
            
            <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">));</span>  <span class="c1">// 시작점</span>
            <span class="n">found</span><span class="p">[</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">parent</span><span class="p">[</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">);</span>

            <span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Pos</span> <span class="n">pos</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">Dequeue</span><span class="p">();</span>
                <span class="kt">int</span> <span class="n">nowY</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">nowX</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="kt">int</span> <span class="n">nextY</span> <span class="p">=</span> <span class="n">nowY</span> <span class="p">+</span> <span class="n">deltaY</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                    <span class="kt">int</span> <span class="n">nextX</span> <span class="p">=</span> <span class="n">nowX</span> <span class="p">+</span> <span class="n">deltaX</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">nextY</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">nextY</span> <span class="p">&gt;=</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span> <span class="p">||</span> <span class="n">nextX</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">nextX</span> <span class="p">&gt;=</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">)</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">_board</span><span class="p">.</span><span class="n">Tile</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">]</span> <span class="p">==</span> <span class="n">Board</span><span class="p">.</span><span class="n">TileType</span><span class="p">.</span><span class="n">Wall</span><span class="p">)</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">])</span>
                        <span class="k">continue</span><span class="p">;</span>

                    <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">));</span>
                    <span class="n">found</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="n">parent</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">nowY</span><span class="p">,</span> <span class="n">nowX</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span> 

            <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="n">_board</span><span class="p">.</span><span class="n">DestY</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="n">_board</span><span class="p">.</span><span class="n">DestX</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">].</span><span class="n">Y</span> <span class="p">!=</span> <span class="n">y</span> <span class="p">||</span> <span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">].</span><span class="n">X</span> <span class="p">!=</span> <span class="n">x</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
                <span class="n">Pos</span> <span class="n">pos</span> <span class="p">=</span> <span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">];</span>
                <span class="n">y</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">x</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
            <span class="n">_points</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p><em>오른 손 법칙에서 그랬던 것과 마찬가지로 *Update</em> 함수에서 플레이어의 위치를 프레임마다 결정하지 않고 미리 플레이어 위치 초기화 과정에서 미리 도착지까지 향하는 길(플레이어 위치들)을 결정해두고 리스트에 저장해둔다. <em>Update</em> 함수에서는 리스트에 있는 타일들을 꺼내면 될 뿐.*</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">deltaY</code>, <code class="language-plaintext highlighter-rouge">deltaX</code>
    <ul>
      <li>반시계 방향으로 Up, Left, Down, Right 순으로
        <ul>
          <li>Up 방향으로 가기 위해선 Y 방향으로 <code class="language-plaintext highlighter-rouge">deltaY[0]</code>(-1) 만큼, X 방향으로 <code class="language-plaintext highlighter-rouge">deltaX[0]</code>(0) 만큼 이동하면 된다.</li>
          <li>Left 방향으로 가기 위해선 Y 방향으로 <code class="language-plaintext highlighter-rouge">deltaY[1]</code>(0) 만큼, X 방향으로 <code class="language-plaintext highlighter-rouge">deltaX[1]</code>(-1) 만큼 이동하면 된다.</li>
          <li>Down 방향으로 가기 위해선 Y 방향으로 <code class="language-plaintext highlighter-rouge">deltaY[2]</code>(1) 만큼, X 방향으로 <code class="language-plaintext highlighter-rouge">deltaX[2]</code>(0) 만큼 이동하면 된다.</li>
          <li>Right 방향으로 가기 위해선 Y 방향으로 <code class="language-plaintext highlighter-rouge">deltaY[3]</code>(0) 만큼, X 방향으로 <code class="language-plaintext highlighter-rouge">deltaX[3]</code>(1) 만큼 이동하면 된다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">found</code> 👉 한번이라도 예약된적이 있는 타일 체크</li>
  <li><code class="language-plaintext highlighter-rouge">parent</code> 👉 <u>해당 타일의 부모 (연결된 이전 노드)</u></li>
  <li><code class="language-plaintext highlighter-rouge">q</code> 👉 추후 방문할 정점들을 큐에 추가하여 예약. 자신의 가까운 정점들을 차례로 추가한다.</li>
  <li>시작하기
    <ul>
      <li><code class="language-plaintext highlighter-rouge">q</code> 큐에 시작 위치(인수로 들어온 PosX, PosY) 넣기</li>
      <li><code class="language-plaintext highlighter-rouge">found</code> 일단 시작 위치는 방문 처리 true</li>
      <li><code class="language-plaintext highlighter-rouge">parent</code> <u>시작 위치의 부모는 자기 자신</u></li>
    </ul>
  </li>
  <li>큐가 빌 때까지, 즉 더 이상 예약 된 정점이 아무 것도 없을 때 까지 아래 과정을 반복한다.
    <ul>
      <li>1️⃣ 큐에서 꺼내기 (현재 방문 중) 👉 <code class="language-plaintext highlighter-rouge">nowY</code>, <code class="language-plaintext highlighter-rouge">nowX</code></li>
      <li>2️⃣ 다음에 방문할 수 있도록 큐에 예약하기
        <ul>
          <li>현재 방문 중인 <code class="language-plaintext highlighter-rouge">nowY</code>, <code class="language-plaintext highlighter-rouge">nowX</code>을 기준으로 4 개의 방향 Up, Left, Dowwn, Right 검사 (<code class="language-plaintext highlighter-rouge">nextY</code>, <code class="language-plaintext highlighter-rouge">nextX</code>) 👉 <u>본인 기준 가장 가까운 정점을 검사하는 것과 같다. 본인 주변 4 방향 타일을 검사하는 것이니까.</u>
            <ul>
              <li>런타임 에러 방지(인덱스 벗어나진 않는지 검사)</li>
              <li>1️⃣ <code class="language-plaintext highlighter-rouge">nextY</code>, <code class="language-plaintext highlighter-rouge">nextX</code>가 갈 수 있는 곳인지 (벽인지) 검사
                <ul>
                  <li>그래프로 따지면 연결 되지 않은 곳인지를 검사</li>
                </ul>
              </li>
              <li>2️⃣ <code class="language-plaintext highlighter-rouge">nextY</code>, <code class="language-plaintext highlighter-rouge">nextX</code>가 방문 했던 곳인지 검사</li>
            </ul>
          </li>
          <li>검사 통과 되었으면 방문 가능한 정점이므로 큐에 추가하여 예약하자.
            <ul>
              <li>큐에 <code class="language-plaintext highlighter-rouge">nextY</code>, <code class="language-plaintext highlighter-rouge">nextX</code> 추가</li>
              <li><code class="language-plaintext highlighter-rouge">nextY</code>, <code class="language-plaintext highlighter-rouge">nextX</code> 미리 방문 체크</li>
              <li><code class="language-plaintext highlighter-rouge">nextY</code>, <code class="language-plaintext highlighter-rouge">nextX</code>의 부모(연결된 이전 정점)는 <code class="language-plaintext highlighter-rouge">nowY</code>, <code class="language-plaintext highlighter-rouge">nowX</code></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>여기까지 완료 하면 <code class="language-plaintext highlighter-rouge">parent</code>에 벽이 아닌 모든  타일들에 자신의 이전 정점 정보가 들어간다.
    <ul>
      <li><u>목적지를 시작으로 목적지부터 거꾸로 부모를 타고 타고 올라가며 그 길을 리스트에 저장하자. 시작점에 도달할 때까지 👉 최단 경로</u>
        <ul>
          <li>그 때 그 때 정점을 받문할 때마다 자신과 가장 가까운, 즉 바로 4 방향중에 하나로 연결된 정점들을 우선적으로 순서대로 방문하기 때문에 <u>⭐어떤 정점이던 간에 부모를 타고 타고 올라가면 출발지까지 최단 경로로 올라갈 수 있다는게 보장된다.⭐</u>
            <ul>
              <li><strong>BFS 언제나 가까운 거리 순으로 방문했으므로 예를 들어 지금 정점5를 방문 중이라면 출발지부터 정점5까지 갈 수 있는 길 중 최단 거리다.</strong></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>시작점은 부모가 자기 자신과 같으므로 부모와 자기 자신이 같을 때까지 반복하면 된다. 그게 바로 시작점에 도착한 것.</li>
    </ul>
  </li>
  <li>마지막으로 리스트를 <em>Reverse</em> 뒤집어 주면 출발지 부터 목적지까지의 최단 경로 타일들이 저장된 리스트가 되는 것이다.
    <ul>
      <li>마지막으로 <em>_points.Add(new Pos(y, x));</em> 한번 더 추가해준 이유는 출발지 정점은 while 조건문에 위배되서 while문을 못 돌아서 리스트에 추가가 안되기 때문.</li>
    </ul>
  </li>
  <li>리스트를 순서대로 쭉 돌며 플레이어 위치를 업뎃해나가면 그게 바로 최단 경로.</li>
</ul>

<p><br /></p>

<h3 id="playercs---전체-코드">📜Player.cs - 전체 코드</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Algorithm</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Pos</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Pos</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">Y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span> <span class="n">X</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">X</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Player</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">PosY</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">PosX</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="n">Random</span> <span class="n">_random</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="p">();</span>

        <span class="n">Board</span> <span class="n">_board</span><span class="p">;</span>

        <span class="k">enum</span> <span class="n">Dir</span>  <span class="c1">// 반시계방향</span>
        <span class="p">{</span>
            <span class="n">Up</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span>
            <span class="n">Left</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
            <span class="n">Down</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
            <span class="n">Right</span> <span class="p">=</span> <span class="m">3</span>
        <span class="p">}</span>

        <span class="kt">int</span> <span class="n">_dir</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Dir</span><span class="p">.</span><span class="n">Up</span><span class="p">;</span>

        <span class="n">List</span><span class="p">&lt;</span><span class="n">Pos</span><span class="p">&gt;</span> <span class="n">_points</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Pos</span><span class="p">&gt;();</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="kt">int</span> <span class="n">posY</span><span class="p">,</span> <span class="kt">int</span> <span class="n">posX</span><span class="p">,</span> <span class="n">Board</span> <span class="n">board</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">PosX</span> <span class="p">=</span> <span class="n">posX</span><span class="p">;</span>
            <span class="n">PosY</span> <span class="p">=</span> <span class="n">posY</span><span class="p">;</span>
            <span class="n">_board</span> <span class="p">=</span> <span class="n">board</span><span class="p">;</span>

            <span class="nf">BFS</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">void</span> <span class="nf">BFS</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">deltaY</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">};</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">deltaX</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">};</span>

            <span class="kt">bool</span><span class="p">[,]</span> <span class="n">found</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">,</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">];</span>
            <span class="n">Pos</span><span class="p">[,]</span> <span class="n">parent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pos</span><span class="p">[</span><span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">,</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">];</span>

            <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Pos</span><span class="p">&gt;</span> <span class="n">q</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Pos</span><span class="p">&gt;();</span>
            <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">));</span>  <span class="c1">// 시작점</span>
            <span class="n">found</span><span class="p">[</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">parent</span><span class="p">[</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">);</span>

            <span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Pos</span> <span class="n">pos</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">Dequeue</span><span class="p">();</span>
                <span class="kt">int</span> <span class="n">nowY</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">nowX</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="kt">int</span> <span class="n">nextY</span> <span class="p">=</span> <span class="n">nowY</span> <span class="p">+</span> <span class="n">deltaY</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                    <span class="kt">int</span> <span class="n">nextX</span> <span class="p">=</span> <span class="n">nowX</span> <span class="p">+</span> <span class="n">deltaX</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">nextY</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">nextY</span> <span class="p">&gt;=</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span> <span class="p">||</span> <span class="n">nextX</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">nextX</span> <span class="p">&gt;=</span> <span class="n">_board</span><span class="p">.</span><span class="n">Size</span><span class="p">)</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">_board</span><span class="p">.</span><span class="n">Tile</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">]</span> <span class="p">==</span> <span class="n">Board</span><span class="p">.</span><span class="n">TileType</span><span class="p">.</span><span class="n">Wall</span><span class="p">)</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">])</span>
                        <span class="k">continue</span><span class="p">;</span>

                    <span class="n">q</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">));</span>
                    <span class="n">found</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="n">parent</span><span class="p">[</span><span class="n">nextY</span><span class="p">,</span> <span class="n">nextX</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">nowY</span><span class="p">,</span> <span class="n">nowX</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span> 

            <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="n">_board</span><span class="p">.</span><span class="n">DestY</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="n">_board</span><span class="p">.</span><span class="n">DestX</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">].</span><span class="n">Y</span> <span class="p">!=</span> <span class="n">y</span> <span class="p">||</span> <span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">].</span><span class="n">X</span> <span class="p">!=</span> <span class="n">x</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
                <span class="n">Pos</span> <span class="n">pos</span> <span class="p">=</span> <span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">];</span>
                <span class="n">y</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">x</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
            <span class="n">_points</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">void</span> <span class="nf">RightHand</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// 현재 바라보고 있는 방향을 기존으로 좌표 변화를 나타냄</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">frontY</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">};</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">frontX</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">};</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">rightY</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">};</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">rightX</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span> <span class="p">};</span>

            <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">));</span>

            <span class="c1">// 목적지 도착하기 전에는 계속 실행</span>
            <span class="c1">// 실시간으로 로직 돌리기 전에, 렌더링도 하기 전에, 미리 길을 찾아 보는 것이다.</span>
            <span class="c1">// 현재 바라보는 방향이 어디냐에 따라 오른손 위치가 다름.(왼쪽을 보고 있는 상태라면 오른손은 절대 기준으로 위쪽일것)</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">PosY</span> <span class="p">!=</span> <span class="n">_board</span><span class="p">.</span><span class="n">DestY</span> <span class="p">||</span> <span class="n">PosX</span> <span class="p">!=</span> <span class="n">_board</span><span class="p">.</span><span class="n">DestX</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// 1. 현재 바라보는 방향을 기준으로 오른쪽으로 갈 수 있는지 확인</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_board</span><span class="p">.</span><span class="n">Tile</span><span class="p">[</span><span class="n">PosY</span> <span class="p">+</span> <span class="n">rightY</span><span class="p">[</span><span class="n">_dir</span><span class="p">],</span> <span class="n">PosX</span> <span class="p">+</span> <span class="n">rightX</span><span class="p">[</span><span class="n">_dir</span><span class="p">]]</span> <span class="p">==</span> <span class="n">Board</span><span class="p">.</span><span class="n">TileType</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="c1">// 오른쪽으로 가기</span>
                    <span class="c1">// 1. 오른쪽 방향으로 90 도 회전</span>
                    <span class="n">_dir</span> <span class="p">=</span> <span class="p">(</span><span class="n">_dir</span> <span class="p">-</span> <span class="m">1</span> <span class="p">+</span> <span class="m">4</span><span class="p">)</span> <span class="p">%</span> <span class="m">4</span><span class="p">;</span>
                    <span class="c1">// 2. 앞으로 한 보 전진</span>
                    <span class="n">PosY</span> <span class="p">=</span> <span class="n">PosY</span> <span class="p">+</span> <span class="n">frontY</span><span class="p">[</span><span class="n">_dir</span><span class="p">];</span>
                    <span class="n">PosX</span> <span class="p">=</span> <span class="n">PosX</span> <span class="p">+</span> <span class="n">frontX</span><span class="p">[</span><span class="n">_dir</span><span class="p">];</span>

                    <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="c1">// 2. 현재 바라보는 방향을 기준으로 앞 쪽으로 갈 수 있는지</span>
                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_board</span><span class="p">.</span><span class="n">Tile</span><span class="p">[</span><span class="n">PosY</span> <span class="p">+</span> <span class="n">frontY</span><span class="p">[</span><span class="n">_dir</span><span class="p">],</span> <span class="n">PosX</span> <span class="p">+</span> <span class="n">frontX</span><span class="p">[</span><span class="n">_dir</span><span class="p">]]</span> <span class="p">==</span> <span class="n">Board</span><span class="p">.</span><span class="n">TileType</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="c1">// 앞으로 한 보 전진</span>
                    <span class="n">PosY</span> <span class="p">=</span> <span class="n">PosY</span> <span class="p">+</span> <span class="n">frontY</span><span class="p">[</span><span class="n">_dir</span><span class="p">];</span>
                    <span class="n">PosX</span> <span class="p">=</span> <span class="n">PosX</span> <span class="p">+</span> <span class="n">frontX</span><span class="p">[</span><span class="n">_dir</span><span class="p">];</span>

                    <span class="n">_points</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Pos</span><span class="p">(</span><span class="n">PosY</span><span class="p">,</span> <span class="n">PosX</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="c1">// 왼쪽 방향으로 90 도 회전 해주고 다음 반복 하러 (반시계방향으로 여러 방향 따져봄) </span>
                    <span class="n">_dir</span> <span class="p">=</span> <span class="p">(</span><span class="n">_dir</span> <span class="p">+</span> <span class="m">1</span> <span class="p">+</span> <span class="m">4</span><span class="p">)</span> <span class="p">%</span> <span class="m">4</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">const</span> <span class="kt">int</span> <span class="n">MOVE_TICK</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>   <span class="c1">// 10밀리세컨즈 = 0.01 초 마다 움직이게</span>
        <span class="kt">int</span> <span class="n">_sumTick</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">_lastIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">deltaTick</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_lastIndex</span> <span class="p">&gt;=</span> <span class="n">_points</span><span class="p">.</span><span class="n">Count</span><span class="p">)</span>
                <span class="k">return</span><span class="p">;</span>

            <span class="n">_sumTick</span> <span class="p">+=</span> <span class="n">deltaTick</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_sumTick</span> <span class="p">&gt;=</span> <span class="n">MOVE_TICK</span><span class="p">)</span>  <span class="c1">// 이부분은 0.1초마다 실행</span>
            <span class="p">{</span>
                <span class="n">_sumTick</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

                <span class="n">PosY</span> <span class="p">=</span> <span class="n">_points</span><span class="p">[</span><span class="n">_lastIndex</span><span class="p">].</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">PosX</span> <span class="p">=</span> <span class="n">_points</span><span class="p">[</span><span class="n">_lastIndex</span><span class="p">].</span><span class="n">X</span><span class="p">;</span>
                <span class="n">_lastIndex</span><span class="p">++;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://camo.githubusercontent.com/e12a971b98daa32b6638dc295bbb5ba13c405c7f/68747470733a2f2f706f737466696c65732e707374617469632e6e65742f4d6a41794d4445774d445a664e5467672f4d4441784e6a41784f546b314d5463314f544d312e49366e473034725f4e5350686b2d6d2d4668386b526c614b77766175664f794e625734785654745252626b672e776d50735461367370616265747352534f42757964695446337273314e564e326e75496f4b734d2d52496f672e4749462e736f6879756e655f616e2f4749465f323032302d31302d30365f2545432539382541342545442539422538345f31302d33352d32352e6769663f747970653d77373733" alt="image" /></p>

<p><br /></p>

<h2 id="-bfs-단점">🚖 BFS 단점</h2>

<blockquote>
  <p>BFS 는 모든 경로를 동일한 조건으로 이동할 수 있을 때만 사용이 가능하다. 가중치 있는 그래프에선 X</p>
</blockquote>

<ul>
  <li>제한적인 상황에서만 사용이 가능
    <ul>
      <li>가중치가 없이 모든 정점이 동등한 경우에만 사용 가능</li>
      <li>만약 상하좌우 뿐만이 아니라 대각선 이동도 가능하여 총 8 개의 방향으로 움직일 수 있다면 (즉, 연결되어 있는 정점이 8개라면)
        <ul>
          <li>상하좌우 이동 비용이 1 이라면</li>
          <li>대각선 이동 비용은 \(sqrt(2)\) 이기 때문에 대각선과 상하좌우 정점들이 서로 동등하지 못하다.
            <ul>
              <li>BFS는 자신과 연결되어 있는 정점들을 모두 차례대로 동등하게 탐색하는데, 가중치가 다르므로 거리에 있어 모호해지기 때문이다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>가중치 있는 그래프는 <strong>다익스트아 최단 경로 알고리즘</strong> 에서 순회</p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET