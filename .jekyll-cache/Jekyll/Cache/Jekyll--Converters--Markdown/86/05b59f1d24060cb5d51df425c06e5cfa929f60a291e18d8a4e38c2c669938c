I"X@<p class="notice--warning">인프런에 있는 Rookiss님의 <strong>[C#과 유니티로 만드는 MMORPG 게임 개발 시리즈] Part2: 자료구조와 알고리즘</strong> 강의를 듣고 정리한 필기입니다. 😀<br />
<a href="(https://www.inflearn.com/course/유니티-MMORPG-유니티-개발-part2#)">🌜 강의 들으러 가기 Click</a></p>

<h1 id="chapter-3-미로-준비">Chapter 3. 미로 준비</h1>

<h2 id="-미로-준비">🚖 미로 준비</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/94974853-cd004d80-054a-11eb-9ec2-1732a2cbfcc3.png" alt="image" /></p>

<ul>
  <li>미로는 한 칸 한 칸마다 채워져 있는 원 하나로 그린다.</li>
  <li>미로의 크기는 size X size 로 지정.</li>
  <li>미로 배열은 이차원 배열로 관리하고 원소를 타일이라고 하자.</li>
  <li>가장 자리의 타일들은 벽이며 빨간색.</li>
  <li>가장 자리가 아닌 타일들은 갈 수 있는 곳이며 초록색.</li>
</ul>

<h3 id="boardcs">📜Board.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Algorithm</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Board</span>
    <span class="p">{</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="n">CIRCLE</span> <span class="p">=</span> <span class="err">'\</span><span class="n">u25cf</span><span class="err">'</span><span class="p">;</span>  <span class="c1">// 채워진 원 그리는 문자 코드</span>

        <span class="k">public</span> <span class="n">TileType</span><span class="p">[,]</span> <span class="n">_tile</span><span class="p">;</span>  <span class="c1">// 맵 배열. 2차원 배열</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">_size</span><span class="p">;</span>  <span class="c1">// 맵 크기. _size X _size 로 정해짐</span>

        <span class="k">public</span> <span class="k">enum</span> <span class="n">TileType</span>
        <span class="p">{</span>
            <span class="n">Empty</span><span class="p">,</span>   <span class="c1">// 갈 수 있는 타일</span>
            <span class="n">Wall</span><span class="p">,</span>    <span class="c1">// 갈 수 없는 타일</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_tile</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TileType</span><span class="p">[</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">];</span>
            <span class="n">_size</span> <span class="p">=</span> <span class="n">size</span><span class="p">;</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">x</span> <span class="p">==</span> <span class="n">_size</span> <span class="p">-</span> <span class="m">1</span> <span class="p">||</span> <span class="n">y</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">y</span> <span class="p">==</span> <span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>   <span class="c1">// 가장 자리의 타일들을 벽으로 정의</span>
                        <span class="n">_tile</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="p">=</span> <span class="n">TileType</span><span class="p">.</span><span class="n">Wall</span><span class="p">;</span>  
                    <span class="k">else</span>   <span class="c1">// 가장 자리가 아닌 타일들은 갈 수 있는 곳으로 정의</span>
                        <span class="n">_tile</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="p">=</span> <span class="n">TileType</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Render</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ConsoleColor</span> <span class="n">prevColor</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span><span class="p">;</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="nf">GetTileColor</span><span class="p">(</span><span class="n">_tile</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]);</span> 
                    <span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">CIRCLE</span><span class="p">);</span>  <span class="c1">// 동그라미 1개 그림</span>
                <span class="p">}</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">();</span>  <span class="c1">// 개행</span>
            <span class="p">}</span>

            <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">prevColor</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">ConsoleColor</span> <span class="nf">GetTileColor</span><span class="p">(</span><span class="n">TileType</span> <span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">switch</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="n">TileType</span><span class="p">.</span><span class="n">Empty</span><span class="p">:</span>  <span class="c1">// 갈 수 있는 곳이면 초록색 리턴</span>
                    <span class="k">return</span> <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Green</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">TileType</span><span class="p">.</span><span class="n">Wall</span><span class="p">:</span>  <span class="c1">// 갈 수 없는 벽이면 빨간색 리턴</span>
                    <span class="k">return</span> <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Red</span><span class="p">;</span>
                <span class="k">default</span><span class="p">:</span>  <span class="c1">// 디폴트는 초록색 리턴</span>
                    <span class="k">return</span> <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Green</span><span class="p">;</span>  
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/94975616-35e8c500-054d-11eb-8f68-1def6907cf9d.png" alt="image" /></p>

<ul>
  <li><em>Render()</em> 에서 원래 색을 보존한 이유
    <ul>
      <li>어차피 색은 미로를 그릴 때만 사용될 거라서 다시 원래 색으로 돌려 주지 않으면 위 사진처럼 그 이후의 콘솔 출력의 색에도 영향을 미치니까</li>
    </ul>
  </li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ConsoleColor</span> <span class="n">prevColor</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span><span class="p">;</span>  <span class="c1">// 원래 색 보존</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span> 
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="nf">GetTileColor</span><span class="p">(</span><span class="n">_tile</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]);</span> 
        <span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">CIRCLE</span><span class="p">);</span>  <span class="c1">// 동그라미 1개 그림</span>
    <span class="p">}</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">();</span>  <span class="c1">// 개행</span>
<span class="p">}</span>

<span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">prevColor</span><span class="p">;</span>  <span class="c1">// 보존했던 색으로 다시 되돌림</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="programcs">📜Program.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Algorithm</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Board</span> <span class="n">board</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Board</span><span class="p">();</span>
            <span class="n">board</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="m">25</span><span class="p">);</span>

            <span class="n">Console</span><span class="p">.</span><span class="n">CursorVisible</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">const</span> <span class="kt">int</span> <span class="n">WAIT_TICK</span> <span class="p">=</span> <span class="m">1000</span> <span class="p">/</span> <span class="m">30</span><span class="p">;</span>

            <span class="kt">int</span> <span class="n">lastTick</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="err">#</span><span class="n">region</span> <span class="err">프레임</span> <span class="err">관리</span>
                <span class="kt">int</span> <span class="n">currentTick</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="n">TickCount</span><span class="p">;</span>  <span class="c1">// 밀리 세컨즈로 나타낸 현재시간.  1 밀리 세컨즈 = 1/1000 초</span>
                <span class="kt">int</span> <span class="n">elapsedTick</span> <span class="p">=</span> <span class="n">currentTick</span> <span class="p">-</span> <span class="n">lastTick</span><span class="p">;</span> <span class="c1">// 경과 시간(현재시간 - 마지막으로 잰 시간)</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">elapsedTick</span> <span class="p">&lt;</span> <span class="m">1000</span> <span class="p">/</span> <span class="m">30</span><span class="p">)</span> <span class="c1">// 경과한 시간이 1/30초보다 작다면 아래 과정을 처리 하지 않고 돌아감. 즉 30프레임 기준, 한 프레임 당 한번 처리되도록!</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="n">lastTick</span> <span class="p">=</span> <span class="n">currentTick</span><span class="p">;</span>  <span class="c1">// 1/30초, 즉 한 프레임이 경과 되었다면 마지막 측정 시간을 현재 시간으로 업뎃</span>
                <span class="err">#</span><span class="n">endregion</span>

                <span class="c1">// 1.입력</span>
                <span class="c1">// 2.로직</span>
                <span class="c1">// 3.렌더링</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">SetCursorPosition</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
                <span class="n">board</span><span class="p">.</span><span class="nf">Render</span><span class="p">();</span>  <span class="c1">// 미로 렌더링</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET