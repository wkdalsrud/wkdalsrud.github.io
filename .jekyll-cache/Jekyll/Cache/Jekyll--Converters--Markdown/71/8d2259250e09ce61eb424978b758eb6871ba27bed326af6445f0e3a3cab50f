I"^<h1 id="힙-라면-공장">[힙] 라면 공장</h1>

<blockquote>
  <p>난이도 ⭐⭐</p>
</blockquote>

<h2 id="문제">문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/88870545-9c511e80-d250-11ea-8962-f894783066c4.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<p><br /></p>

<h2 id="풀이">풀이</h2>

<p>어떻게 풀어야할지 아예 모르겠어서.. 30분만 딱 고민해본 후 다른 분들의 풀이를 참고했던 문제다. 근데 다른 분들의 풀이를 보자마자 생각보다 간단한 풀이였다는 것을 알게 되서 좀 더 고민해볼걸 그랬나 싶었다. 😥</p>

<blockquote>
  <p>밀가루를 최소한으로 공급받으려면 <u>재고가 0이 될 때까지 최대한 쓰고난 후 </u> <u>최대로 공급되는 양으로 받아야 한다.</u></p>
</blockquote>

<ul>
  <li>👉 <strong>즉, 밀가루 양 supplies를 Max Heap 우선순위 큐에서 관리해야 한다는 얘기</strong>
    <ul>
      <li>💡 밀가루 받을 수 있는 날마다 우선 순위 큐에 받아 놓기
        <ul>
          <li><code class="language-plaintext highlighter-rouge">answer</code>는 증가 X</li>
        </ul>
      </li>
      <li>💡 stock이 0 이 될 때마다 우선 순위 큐에 받아 두었던 밀가루들 중 가장 큰 양을 pop 하여 stock에 더해준다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">answer</code>는 증가</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>day의 범위는 0 ~ k-1 이며 day가 1씩 늘어날 때마다 <code class="language-plaintext highlighter-rouge">stcok</code>은 1 씩 줄어든다.
    <ul>
      <li>하루에 1톤씩 쓰기 때문</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">stock</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dates</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">day</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="n">day</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">day</span> <span class="o">==</span> <span class="n">dates</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">supplies</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
            <span class="n">index</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">stock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">stock</span> <span class="o">+=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="n">stock</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>우선순위큐 <code class="language-plaintext highlighter-rouge">pq</code> 👉 밀가루 공급 날마다 받아 둘 <code class="language-plaintext highlighter-rouge">Max Heap</code></li>
  <li><code class="language-plaintext highlighter-rouge">index</code> 👉 dates, supplies를 순회할 인덱스</li>
  <li><code class="language-plaintext highlighter-rouge">day</code>를 하루하루 <code class="language-plaintext highlighter-rouge">k-1</code> 까지 증가시키는 과정
    <ul>
      <li><strong>if (day == dates[index])</strong>
        <ul>
          <li>밀가루를 공급받을 수 있는 날이 되면
            <ul>
              <li>우선순위큐에 일단 해당 밀가루 양을 미리 넣어둔다.</li>
              <li>index 증가</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>if (stock == 0)</strong>
        <ul>
          <li>재고가 떨어질때마다 우선순위큐에 받아두었던 밀가루를 pop 한다.
            <ul>
              <li>👉 Max Heap이므로 밀가루 최대 공급량이 pop됨</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">stock</code>에 이를 더해준다.</li>
          <li>stock에 반영했으니 우선순위 큐에서 빼준 후</li>
          <li><code class="language-plaintext highlighter-rouge">answer</code> 증가</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET