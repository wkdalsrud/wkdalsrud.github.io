I"\-<h1 id="그리디-단속-카메라">[그리디] 단속 카메라</h1>

<blockquote>
  <p>난이도 ⭐⭐⭐</p>
</blockquote>

<h2 id="문제">문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/96944588-1fafa280-1516-11eb-9246-f2e7bc5d8bdb.png" alt="image" /></p>

<ul>
  <li>[-13, -14] 지점에 카메라를 설치하면 첫 번째, 두 번째, 세 번째 차량이 카메라를 만난다.</li>
  <li>[-5, -3] 지점에 카메라를 설치하면 네 번째 차량이 카메라를 만난다. -5 지점이라면 세 번째 카메라도 같이 만남</li>
</ul>

<p><br /></p>

<h2 id="풀이">풀이</h2>

<blockquote>
  <p>풀이는 <a href="https://softvanilla.github.io/programmers/programmers_%EB%8B%A8%EC%86%8D%EC%B9%B4%EB%A9%94%EB%9D%BC/">SoftVanilla 님 블로그</a>를 참고하였다.</p>
</blockquote>

<p>이 문제의 내 풀이는 통과하지 못했다. 자꾸 테스트 케이스 몇 개만 틀리더라.. 심지어 기존에 푼 내 풀이를 백업해두지 못 해 잃어버렸다. 겉 보기엔 쉬워보였지만 왠지 모르게 머리가 복잡해지고 동공 지진 나는 그런 문제였다. ㅠ ㅜ 해당 블로거 분의 글을 읽고 제대로 이해할 수 있었다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">routes</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="n">sort</span><span class="p">(</span><span class="n">routes</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">routes</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compare</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    
    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">routes</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>        
        <span class="k">if</span> <span class="p">(</span><span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
            <span class="n">end</span> <span class="o">=</span> <span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="n">end</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>가능한한 많은 자동차가 공통적으로 지나가는 곳, 즉 <u>최대한 자동차들이 겹치는 구간에 카메라를 설치해야</u> 최소로 카메라를 설치할 수 있다. <strong>공통된 구간에 속하는 자동차 수가 많아지다가 자동차 하나라도 구간을 빠져나가서 수가 줄어든다면 바로 이전까진 최대 구간이였던 것이므로 그 때 answer 를 증가시키면 된다.</strong></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sort</span><span class="p">(</span><span class="n">routes</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">routes</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compare</span><span class="p">);</span>
</code></pre></div></div>

<p>먼저 더 앞선 구간을 지나는 자동차 순으로 정렬을 한다. 지나가는 순서대로, 가장 먼저 진입하는 자동차부터 살펴보기 위하여.</p>

<blockquote>
  <p>공통 구간 찾기</p>
</blockquote>

<ul>
  <li><u>뒤에 있는 자동차의 출발점이 앞에 있는 자동차의 퇴장점 보다 더 앞서 나오면</u> 두 자동차는 공통 구간을 가지는 셈이다.
    <ul>
      <li>공통 구간을 가지는 또다른 조건인, 앞에 있는 자동차의 출발점이 뒤에 있는 자동차의 출발점보다 앞선다는 것은 자동차를 지나가는 순서대로 정렬했기 때문에 너무 당연해져서 안따져도 된다.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">)</span>  <span class="c1">// else </span>
    <span class="n">end</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">end</code> <u>현재까지의 공통 구간의 끝 지점</u>
    <ul>
      <li>현재까지의 공통 구간에 <code class="language-plaintext highlighter-rouge">i</code>번째 자동차도 포함된다면 <em>if (routes[i][0] &lt;= end)</em> 코드에선 <em>else</em>
        <ul>
          <li>공통 구간 업데이트 하기
            <ul>
              <li><code class="language-plaintext highlighter-rouge">end</code>를 새롭게 업데이트 해야 한다. 기존의 <code class="language-plaintext highlighter-rouge">end</code>보다 <code class="language-plaintext highlighter-rouge">routes[i][1]</code> i 번째 자동차의 퇴장점이 더 짧다면 그걸로 <code class="language-plaintext highlighter-rouge">en</code>를 업데이트 한다.</li>
              <li>공통 구간의 끝구간을 새롭게 업데이트 해주는게 필요하다. 끝 구간으로 공통 되었는지를 확인해야 하기 때문에</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="n">end</span> <span class="o">=</span> <span class="n">routes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>현재 차량 기준 더 이상 공통 구간이 없을 때 카메라 수를 1 늘리고 현재 차량이 속한 구간을 새로운 공통 구간으로 갱신한다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">i</code>번째 자동차는 현재까지의 공통 구간에 전혀 속하지 않는다면
    <ul>
      <li><code class="language-plaintext highlighter-rouge">i</code>번째 자동차의 출발점은 <code class="language-plaintext highlighter-rouge">end</code>를 초과함.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">answer</code>를 증가시킨다. 카메라를 현재까지의 공통 구간에 두어야함! 현재 구간까지 최대한 자동차가 많이 겹치는 구간인 것이기 때문에</li>
  <li>새로운 공통 구간 업데이트 하기
    <ul>
      <li><code class="language-plaintext highlighter-rouge">end</code>를 새롭게 업데이트 한다. 전혀 새로운 공통 구간이 생기는 것이므로 공통 구간에 속하지 않았던 <code class="language-plaintext highlighter-rouge">i</code>번째 자동차의 퇴장점으로 새롭게 업데이트 한다.</li>
      <li><code class="language-plaintext highlighter-rouge">begin</code>은 업데이트 하지 않아도 된다. 정렬 덕에 <code class="language-plaintext highlighter-rouge">begin</code>이 <code class="language-plaintext highlighter-rouge">routes[i][0]</code>보다 커질 일은 없기 때문이다. <code class="language-plaintext highlighter-rouge">begin</code>이 자기 자신의 값을 유지할 일도 없다. <code class="language-plaintext highlighter-rouge">항상 routes[i][0]</code>로 업데이트 한다. 그래서 공통 구간을 찾고 업데이트 하는데에 <code class="language-plaintext highlighter-rouge">begin</code>은 필요 없다.</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET