I"I<h2 id="자바-언어의-역사">자바 언어의 역사</h2>
<ul>
  <li>Sun Microsystems의 제임스 고슬링</li>
  <li>1990년 그린 프로젝트(소형 전자제품에 들어가는 소프트웨어)와 Oak 언어에서 시작이 됐다.</li>
  <li>C++를 확장해서 사용하려 했지만 부족하다고 생각해서 C++를 토대로 새로운 언어를 개발함</li>
  <li>1995년 Java와 HotJava(자바 언어로 구현한 웹 브라우저) 발표함</li>
  <li>1996년 1월 공식적으로 JDK1.0을 발표했다.</li>
</ul>

<h2 id="java-언어의-특징">Java 언어의 특징</h2>
<ul>
  <li>C와 C++ 언어에서 발전된 언어</li>
  <li>플랫폼에 독립적이다.</li>
  <li>객체지향언어이다.</li>
  <li>웹이나 네트워크 프로그래밍에 용이하다.</li>
  <li>예외 처리 기능을 제공한다.</li>
  <li>멀티 스레딩을 지원한다.</li>
  <li>WORA(Write Once Run Anywhere) : 한번 작성한 코드는 어떠한 환경에서도 실행이 가능하게 한다.</li>
</ul>

<h2 id="java-프로그램의-실행">Java 프로그램의 실행</h2>
<blockquote>
  <p>HelloWorld.java → <code class="language-plaintext highlighter-rouge">compiler</code> → HelloWorld.class → <code class="language-plaintext highlighter-rouge">JVM</code> → HelloWorld 실행</p>
</blockquote>

<ul>
  <li>Java 소스 프로그램의 확장자는 <code class="language-plaintext highlighter-rouge">.java</code>이다.</li>
  <li>바이트 코드
    <ul>
      <li>Java 소스를 컴파일한 결과물의 확장자는 <code class="language-plaintext highlighter-rouge">.class</code>이다.</li>
      <li>컴파일된 자바코드라고도 한다.</li>
    </ul>
  </li>
</ul>

<h3 id="애플리케이션">애플리케이션</h3>
<ul>
  <li>Java 프로그램을 실행하려면 <code class="language-plaintext highlighter-rouge">main()</code> 함수가 반드시 필요하다.</li>
</ul>

<h3 id="애플릿">애플릿</h3>
<ul>
  <li>HTML 웹 페이지에 포함되어 웹 브라우저를 통해 실행</li>
</ul>

<p><br /></p>

<h2 id="플랫폼-platform">플랫폼 (platform)</h2>
<ul>
  <li>프로그램의 실행을 위한 <span style="color:red">하드웨어</span>와 <span style="color:red">소프트웨어</span> 환경을 말한다.</li>
</ul>

<h2 id="java-플랫폼">JAVA 플랫폼</h2>
<ul>
  <li>Java 프로그램의 <u>개발과 실행</u>을 위한 환경(소프트웨어환경)이다.</li>
  <li>운영체제에 맞는 Java 플랫폼을 설치해야 한다.</li>
</ul>

<h3 id="c프로그램">C프로그램</h3>
<blockquote>
  <p>컴퓨터 시스템(하드웨어) → 운영체제(windows, unix, linux 등) → C프로그램</p>
</blockquote>

<h3 id="java프로그램">JAVA프로그램</h3>
<blockquote>
  <p>컴퓨터 시스템(하드웨어) → 운영체제(windows, unix, linux 등) → <span style="color:red">Java 플랫폼</span> → Java 프로그램</p>
</blockquote>

<p>C프로그램이나 다른 언어 프로그램은 운영체제만 거치고 하드웨어로 전달이 되는데 <strong>Java애플리케이션</strong>은 중간에 플랫폼(JVM)을 한 번 더 거치게 되고, 하드웨어에 맞게 완전히 컴파일 된 상태가 아니고 실행 시에 해석이 된다. (인터프리터)</p>

<p><br /></p>

<h2 id="컴파일러">컴파일러</h2>
<ul>
  <li>컴파일러는 소스코드에서 기계어로 번역 시 특정 CPU에 맞게 번역이 된다.
    <ul>
      <li>이는 한 번 실행을 하고 다시 실행 시 바로 실행이 되기 때문에 속도가 빠르다는 장점이 있지만 컴파일 과정을 거치면 다른 OS에서 해당 프로그램을 실행시키기 어려운 단점도 있다.</li>
    </ul>
  </li>
  <li>자바에서는 배포할 때 컴파일러를 사용한다.</li>
</ul>

<h2 id="인터프리터">인터프리터</h2>
<ul>
  <li>통역처럼 한 줄 한 줄 번역하여 코드를 바로 실행하는 것</li>
  <li>인터프리터는 한 줄씩 실행하는 게 아니라 함수 단위로 실행하는 실행기이다.</li>
  <li>함수단위로 번역할 때 에러가 날 때까지 실행한다.</li>
</ul>

<p><br /></p>

<h2 id="java-플랫폼의-구성">Java 플랫폼의 구성</h2>
<h3 id="1-jvm">1. JVM</h3>
<ul>
  <li>Java <span style="color:orange">프로그램의 실행 환경</span>을 제공하는 가상 기계</li>
  <li>Java 프로그램의 구동 엔진</li>
  <li>실행에 필요한 사항을 관리한다.</li>
  <li>메모리 정리를 자동으로 수행한다.
    <ul>
      <li>가비지컬렉터 (Garbage Collector)
        <ul>
          <li>new 연산자를 이용하여 메모리를 할당받아서 사용하고 더이상 필요가 없어지면 가비지컬렉터가 자동으로 메로리를 관리하여 삭제해준다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-java-api">2. Java API</h3>
<ul>
  <li>Application Programming Interface
    <ul>
      <li>응용 프로그램에서 사용할 수 있도록 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스</li>
    </ul>
  </li>
  <li>프로그램의 개발에 필요한 클래스 라이브러리</li>
</ul>

:ET