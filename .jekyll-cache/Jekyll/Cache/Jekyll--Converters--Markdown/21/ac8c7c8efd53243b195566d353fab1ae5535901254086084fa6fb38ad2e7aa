I"w<h1 id="-외벽-점검">📌 외벽 점검</h1>

<blockquote>
  <p>난이도 ⭐⭐⭐</p>
</blockquote>

<h2 id="-문제">🚀 문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/112749239-0b5b5e80-8ffc-11eb-8112-e923c2961106.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/112749247-18784d80-8ffc-11eb-87ba-df4753d45818.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/112749275-3cd42a00-8ffc-11eb-84d7-90357d26c574.png" alt="image" /></p>

<p><br /></p>

<h2 id="-내-풀이">🚀 내 풀이</h2>

<h3 id="-1-차-풀이-시간초과">🔥 1 차 풀이 (시간초과⏰)</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="n">found</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">north</span><span class="p">;</span> <span class="c1">// n</span>
<span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">num</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">friends</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// num 은 설정한 필요한 친구 수</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 진짜 num 명의 친구 수로 으로 모든 외벽을 커버할 수 있었다면 found 를 true 로 만들기</span>
        <span class="kt">bool</span> <span class="n">completed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">weak_visited</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">completed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span>
            <span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// start : 점검하기 시작할 외벽 시작점</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 이미 점검한 외벽이면 넘어감</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span><span class="p">[</span><span class="n">start</span><span class="p">])</span>
            <span class="k">continue</span><span class="p">;</span>

        <span class="c1">// 외벽 체크하기 전의 점검 상태 미리 옮겨놓고 보존 (초기 상태)</span>
        <span class="c1">// DFS 돌아와서 복원할 수 있도록</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">before</span> <span class="o">=</span> <span class="n">weak_visited</span><span class="p">;</span>

        <span class="c1">// 반시계 방향(왼쪽)</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// start 에서 반시계방향으로 돌면서 제거 </span>
        <span class="kt">int</span> <span class="n">dest</span> <span class="o">=</span> <span class="n">weak</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">-</span> <span class="n">friends</span><span class="p">[</span><span class="n">depth</span><span class="p">];</span> <span class="c1">// 반시계 방향으로 해당 start 위치 외벽으로부터 현재 친구가 갈 수 있는 거리로 갈 수 있는 '위치'</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span> <span class="c1">// start 외벽에서부터 반시계 방향으로 점검할 것</span>
        <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// 왼쪽으로 가다가 범위 넘어가버릴 때 (순환해야 해서)</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>   <span class="c1">// 점검 완료한 개수 count 가 전체 외벽 개수를 넘을 수는 없음</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 왼쪽으로 가다가 범위를 넘어버리면</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="c1">// 오른쪽 끝으로 순환하여 갈 수 있도록 i 설정</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// i = 0 이상으로 넘어간 상태라면 (north 빼서 그냥 음수로 보정)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">weak</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">north</span> <span class="o">&gt;=</span> <span class="n">dest</span><span class="p">)</span> <span class="c1">// depth 번째 친구가 커버할 수 있는 곳이라면(= 왼쪽으로 start~dest 범위 내에 있는 외벽들은 점검할 수 있다. 아직 dest 에 도달하지 않았다면 점검할 수 있는 외벽). 예를들어 1시에서 10시 인 곳으로 범위를 넘어갔다면 10 - 12 = -2 이렇게 -2 시로 취급한다.</span>
                    <span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// 점검 체크</span>
                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>  <span class="c1">//  i = 0 이상으로 넘어간 상태가 아니라면</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">weak</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">dest</span><span class="p">)</span> <span class="c1">// depth 번째 친구가 커버할 수 있는 곳이라면(= 왼쪽으로 start~dest 범위 내에 있는 외벽들은 점검할 수 있다. 아직 dest 에 도달하지 않았다면 점검할 수 있는 외벽)</span>
                    <span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// 점검 체크</span>
                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">++</span><span class="n">count</span><span class="p">;;</span> 
            <span class="o">--</span><span class="n">i</span><span class="p">;</span> <span class="c1">// 반시계방향 (왼쪽)</span>
        <span class="p">}</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 반시계방향으로 점검 체크한 외벽들 정보를 가지고 이제 depth + 1 번째 친구가 점검하러 재귀 호출</span>
        <span class="n">weak_visited</span> <span class="o">=</span> <span class="n">before</span><span class="p">;</span> <span class="c1">// 복원</span>
        <span class="c1">// 위 재귀 호출로 num 명의 친구 수로 으로 모든 외벽을 커버할 수 있었음이 밝혀졌다면 더 검사하지 않고 종료</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> 
            <span class="k">return</span><span class="p">;</span>
        

        <span class="c1">// 시계 방향</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// start 에서 시계방향으로 돌면서 제거 </span>
        <span class="n">dest</span> <span class="o">=</span> <span class="n">weak</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">friends</span><span class="p">[</span><span class="n">depth</span><span class="p">];</span> <span class="c1">// 시계 방향으로 해당 start 위치 외벽에서 현재 친구가 갈 수 있는 거리로 갈 수 있는 위치</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span> <span class="c1">// start 외벽에서부터 시계 방향으로 점검할 것</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// 오른쪽으로 가다가 범위 넘어가버릴 때 (순환해야 해서)</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">weak</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">north</span> <span class="o">&lt;=</span> <span class="n">dest</span><span class="p">)</span>
                    <span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">weak</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">dest</span><span class="p">)</span>
                    <span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">++</span><span class="n">count</span><span class="p">;;</span>
            <span class="o">++</span><span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">weak_visited</span> <span class="o">=</span> <span class="n">before</span><span class="p">;</span>
        <span class="c1">// 위 재귀 호출로 num 명의 친구 수로 으로 모든 외벽을 커버할 수 있었음이 밝혀졌다면 더 검사하지 않고 종료</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span>
            <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dist</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">north</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">weak_visited</span><span class="p">(</span><span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">());</span> 
    <span class="n">sort</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">());</span> <span class="c1">// 가장 많이 점검할 수 있는 친구들이 가장 앞에 오도록 내림차순 정렬</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">dist</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 최소값이 될 수 있는 후보들 (= 필요한 친구 수)</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">friends</span><span class="p">;</span>
        <span class="n">friends</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span> <span class="c1">// 검사할 수 있는 친구 수 할당. 크기는 i 만큼.</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="c1">// 위 재귀 호출로 num 명의 친구 수로 으로 모든 외벽을 커버할 수 있었음이 밝혀졌다면 더 검사하지 않고 종료</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/112747281-47d48d80-8fef-11eb-92a2-c4852175ef99.png" alt="image" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dist</code> 내림 차순 정렬
    <ul>
      <li>친구들을 최소로 투입해야하기 때문에 그러려면 최대한 많이 이동할 수 있는 친구부터 투입해야 한다.</li>
      <li>따라서 내림 차순 정렬!</li>
    </ul>
  </li>
  <li>이 풀이에서 나는 전체 친구들(dist.size())에서 1 명 (=재귀 깊이 1), 2 명 (=재귀 깊이 2), 3 명 (=재귀 깊이 3),.. 이렇게 차례로 이 친구들 수로 전체 외벽을 점검할 수 있는지를 보았다. 1명부터 차례로 검사했으니 처음으로 외벽 전체를 점검할 수 있는 친구들 수를 찾는다면 그게 답이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">friends</code>에 <code class="language-plaintext highlighter-rouge">i</code>명(num)의 친구가 들어가도록 했고 이를 <code class="language-plaintext highlighter-rouge">dist</code> 대신 파라미터로 넘겼다.
        <ul>
          <li>ex) <code class="language-plaintext highlighter-rouge">dist</code>가 [2,3,1,4] 라면 내림 차순 정렬하여 [4,3,2,1] 이 되고 차례로 [4], [4,3], [4,3,2], [4,3,2,1] 이런 친구목록일 때 각각 외벽을 모두 점검할 수 있는지 검사하게 된다.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">dist</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 최소값이 될 수 있는 후보들 (= 필요한 친구 수)</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">friends</span><span class="p">;</span>
  <span class="n">friends</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span> <span class="c1">// 검사할 수 있는 친구 수 할당. 크기는 i 만큼.</span>
  <span class="n">DFS</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="c1">// 위 재귀 호출로 num 명의 친구 수로 으로 모든 외벽을 커버할 수 있었음이 밝혀졌다면 더 검사하지 않고 종료</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>재귀 깊이가 해당 친구 수(num)에 도달했을 때 외벽을 모두 점검하는지를 검사한다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 진짜 num 명의 친구 수로 으로 모든 외벽을 커버할 수 있었다면 found 를 true 로 만들기</span>
    <span class="kt">bool</span> <span class="n">completed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">weak_visited</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">completed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span>
        <span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>순환
    <ul>
      <li>반시계방향으로(배열을 왼쪽으로 순회) 돌다보면 <code class="language-plaintext highlighter-rouge">i=0</code>을 넘길 수도 있는데 이때 <code class="language-plaintext highlighter-rouge">n</code> 을 빼서 보정해준다.
        <ul>
          <li>예를 들어 외벽 위치들이 [1,5,6,10] 이고 <code class="language-plaintext highlighter-rouge">n</code> 이 12 라면, 반시계 방향으로 돌다가 맨 앞 원소인 1 을 넘어버렸을 때 오른쪽 끝 원소인 10 으로 순환하도록 해야 하는데, 10 - 12 = -2 즉, 10이 아닌 <code class="language-plaintext highlighter-rouge">-2</code>로 취급을 한다. <em>dest = weak[start] - friends[depth];</em> 와 비교를 해야하기 때문이다.</li>
        </ul>
      </li>
      <li>시계방향으로 돌때도 마찬가지. 이땐 범위를 넘으면 <code class="language-plaintext highlighter-rouge">n</code> 을 더함.</li>
    </ul>
  </li>
</ul>

<p class="notice--warning"><strong>⏰이 풀이에서 시간 초과가 발생한 이유</strong></p>

<p><u>반시계 방향은 검사하지 않아도 된다. 반시계, 시계 두 방향 중 하나만 선택해서 검사하면 된다.</u> 중복되기 때문이다! 예를 들어 1 에서 시계방향으로 4 를 가는 것은, 4 에서 반시계 방향으로 1 로 가는 것과 같다. 즉, 똑같은 점검이 두 번 일어나는 것이다. 따라서 두 방향 다 검사하지 않고 한 방향만 검사하면 됐었다.😥</p>

<p><br /></p>

<h3 id="-2-차-풀이-시간초과">🔥 2 차 풀이 (시간초과⏰)</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="n">found</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">north</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">num</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">friends</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">bool</span> <span class="n">completed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">weak_visited</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">completed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span>
            <span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span><span class="p">[</span><span class="n">start</span><span class="p">])</span>
            <span class="k">continue</span><span class="p">;</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">before</span> <span class="o">=</span> <span class="n">weak_visited</span><span class="p">;</span>

        <span class="c1">// 시계 방향</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">dest</span> <span class="o">=</span> <span class="n">weak</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">friends</span><span class="p">[</span><span class="n">depth</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
        <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">weak</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">north</span> <span class="o">&lt;=</span> <span class="n">dest</span><span class="p">)</span>
                    <span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">weak</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">dest</span><span class="p">)</span>
                    <span class="n">weak_visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">++</span><span class="n">count</span><span class="p">;;</span>
            <span class="o">++</span><span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">weak_visited</span> <span class="o">=</span> <span class="n">before</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dist</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">north</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">weak_visited</span><span class="p">(</span><span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">());</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">dist</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">friends</span><span class="p">;</span>
        <span class="n">friends</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/112752067-2209b180-900c-11eb-997a-19d7bebb47dd.png" alt="image" /></p>

<p class="notice--warning"><strong>⏰그래도 여전히 시간초과가 발생하는 이유</strong></p>

<p>반시계방향 검사 부분 코드를 지웠더니 윗 풀이의 결과보다는 시간이 줄었지만 그러나 13번 케이스는 아직도 시간초과 문제가 발생하였다.</p>

<p>내 풀이의 단계는 아래와 같다.</p>

<p><em>1 ~ dist.size() 순회 (친구 수 정하기) 👉 weak 순회 (시작 외벽 결정)👉 weak 순회 (점검할 수 있는 외벽들 검사)</em></p>

<ul>
  <li>1 ~ dist.size() 순회 (친구 수 정하기)
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dist</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">dist</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">friends</span><span class="p">;</span>
      <span class="n">friends</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
      <span class="n">DFS</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>weak 순회 (시작 외벽 결정)
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">num</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">friends</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>
</code></pre></div>    </div>
  </li>
  <li>weak 순회 (점검할 수 있는 외벽들 검사)
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">num</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">friends</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
              <span class="n">DFS</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">,</span> <span class="n">friends</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>시간 복잡도를 생각해서 이 과정을 더 줄여야 한다는 이야기다! ㅠㅜ 이 풀이는 외벽 점검을 모두 다하는 순간을 찾자마자 종료되겠지만 입력 크기도 최대인데 외벽 점검을 다 하지 못했을 때의 시간복잡도를 생각해야 한다. 이 과정을 더 줄이고도 답을 찾을 수 있는지를 생각해야 한다.</p>

<p><br /></p>

<h3 id="-3-차-풀이-">🔥 3 차 풀이 ⭕</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cp">#define INF 9999
</span><span class="kt">int</span> <span class="n">answer</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">north</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">dist</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start_weak_pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">weak_visited</span><span class="p">){</span>
    <span class="c1">// 종료 조건 1 : 모든 친구를 다 투입해도 해당 외벽 시작점 + 순회 경로는 모두 점검할 수 없었던 경우</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">dist</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
        <span class="k">return</span><span class="p">;</span>
    
    <span class="c1">// 종료 조건 2 : 이 경로는 현재까지 구한 최소 친구수보다 더 많은 친구수가 필요해서 이 경로로 더 이상 갈 필요가 없는 경우 (가도 answer 보다 더 적은 친구수를 찾아낼 일이 없다.)</span>
    <span class="c1">// depth + 1 은 친구수 (depth 는 재귀 단계)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">answer</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>

    <span class="c1">// start_weak_pos 시작 외벽부터 시계방향으로 "아직 방문하지 않은" 외벽들을 dist[depth] 친구가 점검한다. </span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 시계 방향</span>
        <span class="kt">int</span> <span class="n">next_weak_pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">start_weak_pos</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="c1">// start_weak_pos + i 근데 인덱스가 weak 범위를 넘어가 버릴 수도 있으니 나머지</span>
        <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">weak</span><span class="p">[</span><span class="n">next_weak_pos</span><span class="p">]</span> <span class="o">-</span> <span class="n">weak</span><span class="p">[</span><span class="n">start_weak_pos</span><span class="p">];</span> <span class="c1">// 시작 외벽 start_weak_pos 부터 현재 순회중인 외벽까지의 거리</span>

        <span class="c1">// 시계방향(오른쪽)으로 순회하다가 next_weak_pos 가 weak 범위를 넘어가버리면 인덱스 0, 즉 왼쪽부터 다시 시작하게 된다. 이 경우이다! n 을 더해 보정한다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">next_weak_pos</span> <span class="o">&lt;</span> <span class="n">start_weak_pos</span><span class="p">)</span>
            <span class="n">distance</span> <span class="o">+=</span> <span class="n">north</span><span class="p">;</span> <span class="c1">//  weak 는 오름차순 정렬 상태이므로 여기에 걸렸다는건 distance 가 음수가 되었다는 것이다. n 을 더해 보정해준다. -3 이 되었다면 12를 더해 9로 만듬. 즉 거리가 9.</span>

        <span class="c1">// dist[depth] 친구가 점검할 수 있는 거리면 "방문 체크를 한다."</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&lt;=</span> <span class="n">dist</span><span class="p">[</span><span class="n">depth</span><span class="p">])</span> 
            <span class="n">weak_visited</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">next_weak_pos</span><span class="p">);</span>
        <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 종료 조건 3 : 모든 외벽 지점들을 모두 점검한 경우! (즉 모든 외벽이 "모두 방문된 경우") 이 경로는 끝난 것이니 answer를 업뎃하고 돌아간다. </span>
    <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 위의 if 에서 걸리지 못했다면 아직 방문하지 않은 외벽이 남아있다는 얘기다.</span>
    <span class="c1">// 아직 방문하지 않은 외벽들을 순회하며 각각 시작점으로 삼고 depth + 1 친구 한명을 더 늘려서 다음 친구가 "방문 하지 않은 나머지 외벽들"을 점검할 수 있을지 검사하러 재귀 호출 ㄱㄱ</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">weak_visited</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">start</span><span class="p">))</span> 
            <span class="k">continue</span><span class="p">;</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">dist</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dist</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
    <span class="n">north</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dist</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">greater</span><span class="o">&lt;&gt;</span><span class="p">());</span> <span class="c1">// 내림차순 정렬</span>

    <span class="c1">// 순차적으로 외벽 점검 시작점 정해놓고 재귀호출 </span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> 
        <span class="n">DFS</span><span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">dist</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    
    <span class="c1">// answer 가 그대로 INF 라면 외벽을 모두 점검할 수 있는 경우가 전혀 없다는 뜻</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="n">INF</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/112806442-bc700080-90b1-11eb-86f6-0bffb6efc11a.png" alt="image" /></p>

<p>풀이 코드는 아래 유튜브를 참고했다.</p>

<iframe width="1903" height="800" src="https://www.youtube.com/embed/Oyb2btjRhqg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>이 풀이의 단계는 아래와 같다.</p>

<p><em>weak 순회 (시작 외벽 결정)👉 weak 순회 (점검할 수 있는 외벽들 검사)</em></p>

<ul>
  <li>weak 순회 (시작 외벽 결정)
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dist</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//..</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">start</span><span class="p">)</span> 
      <span class="n">DFS</span><span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">dist</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>weak 순회 (점검할 수 있는 외벽들 검사)
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weak</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">dist</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start_weak_pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">weak_visited</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">weak</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">DFS</span><span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">dist</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">weak_visited</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>내 원래 풀이와 다르게 <em>1 ~ dist.size() 순회 (친구 수 정하기)</em> 이 빠졌다. 대신 모든 weak 의 시작점을 정해놓고 weak 외벽을 모두 점검할 수 있는지를 따지고 모두 점검하지 못할 때 친구 수를 늘리므로써 재귀 호출을 한다.</p>

<p>나는 정답 후보가 될 수 있는 친구 수로 재귀 깊이를 미리 정해두고 결정한 그 친구 수 안에서 외벽 순회 O(N^2) 를 하였고 처음으로 외벽 점검을 모두 할 수 있었던 그 친구 수를 답으로 도출하고 더 이상 진행하지 않았는데, 이 풀이는 친구 수를 미리 정해두는 방식은 취하지 않고 외벽 순회 O(N^2) 를 하면서 해당 친구로 외벽을 다 순회하지 못할 때만 재귀호출로 더 깊게 들어가서 친구 수를 늘려서 순회하는 방식이다. <u>즉, 완전 탐색으로, 외벽이 선택될 수 있는 모든 경우의 수를 다 구하여 매번 필요한 친구 수들 중 가장 최소값을 저장하는 식이다.</u> 미리 친구 수를 정해두지 않고 외벽 순회의 결과에 맞춰 친구 수가 결정된다.</p>

<ul>
  <li>이 풀이는 시간 초과가 나지 않는 이유
    <ul>
      <li>1️⃣ 내 풀이는 3단계긴 하지만 순차탐색처럼 친구를 빨리 찾으면 빨리 끝낼 수 있다. 이처럼 친구 수를 빨리 찾는다면 내 원래 풀이가 더 빠르겠지만.. 입력 크기가 최대인 상태인데 지금 친구들로 모든 외벽을 다 점검하지 못했다면? 내 풀이는 3단계고 이 풀이는 2단계이기 때문에 여기서부터 차이가 크게 날 것이다.</li>
      <li>2️⃣ 재귀의 깊이 <code class="language-plaintext highlighter-rouge">depth</code>가 곧 (투입되는 친구의 수 + 1. depth 가 0 부터 시작하기 때문에)와 같기 떄문에 기존에 저장해둔 현재까지의 최소 친구 수 <code class="language-plaintext highlighter-rouge">answer</code> 보다 <code class="language-plaintext highlighter-rouge">dpeth + 1</code> 가 그 이상으로 더 커지게 되면 굳이 그 쪽으로 가지치기를 할 필요가 없다. <code class="language-plaintext highlighter-rouge">answer</code>를 업뎃 할 수 있는 가능성이 없는 경로이기 떄문이다. 따라서 아래 코드 하나로 시간을 많이 줄일 수 있다. 근데 이 코드가 없어도 통과되긴 했다..⭐
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">answer</span><span class="p">)</span>
    <span class="k">return</span><span class="p">;</span>
</code></pre></div>        </div>

        <p><img src="https://user-images.githubusercontent.com/42318591/113534690-6c8ebd80-960c-11eb-8e8e-883a6a12fc06.png" alt="image" /></p>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h4 id="-비트-연산으로-방문-체크">✈ 비트 연산으로 방문 체크</h4>

<blockquote>
  <p>위 유튜브에서는 방문 체크를 배열이 아닌 <code class="language-plaintext highlighter-rouge">int</code> 정수로 하고 비트 연산으로 방문 체크를 한 것이다. 앞으로 나도 자주 써먹어야지 싶어 정리해둔다.</p>
</blockquote>

<ul>
  <li>방문 체크 👉 <strong>방문한 외벽 자리에 대응되는 비트를 1로 바꾼다.</strong>
    <ul>
      <li>👉 <code class="language-plaintext highlighter-rouge">weak_visited |= (1 &lt;&lt; next_weak_pos)</code>
        <ul>
          <li>점검 완료한 외벽 인덱스가 3 이라면 <code class="language-plaintext highlighter-rouge">1 &lt;&lt; 3</code>은 <code class="language-plaintext highlighter-rouge">00000001</code>을 3 번 왼쪽으로 민 것이니 <code class="language-plaintext highlighter-rouge">00001000</code>이 된다. 이것과 방문 체크 변수인 <code class="language-plaintext highlighter-rouge">weak_visited</code> 와 OR 연산을 하면 <code class="language-plaintext highlighter-rouge">weak_visited</code>의 3 번째 자리가 1 이 된다. 이렇게 방문 체크를 할 수 있다.
            <ul>
              <li>비트는 오른쪽부터 읽는다! <code class="language-plaintext highlighter-rouge">00001</code> 은 4번째 자리가 방문된 것이 아닌 0번쨰 자리가 방문된 것이다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><u>모든 외벽이</u> 방문 되었는지 검사 👉 <strong>예를들어 외벽이 6개라면 현재 방문체크 변수가 111111 과 완전히 동일한지를 봐야한다. 즉, 모든 비트가 1 인지 검사</strong>
    <ul>
      <li>👉 <code class="language-plaintext highlighter-rouge">weak_visited == (1 &lt;&lt; weak.size()) - 1)</code>
        <ul>
          <li>외벽 개수가 총 3 개라면 모든 비트가 1 인 <code class="language-plaintext highlighter-rouge">111</code> 을 만드는 방법은 <code class="language-plaintext highlighter-rouge">1</code> 을 3 번 밀어 <code class="language-plaintext highlighter-rouge">1000</code> 으로 만든 후 이 값에서 <code class="language-plaintext highlighter-rouge">1</code>을 빼주면된다!</li>
          <li>따라서 <em>((1 « weak.size())</em> 에서 <em>1</em> 을 빼준 값이랑 같은지를 비교하면 된다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><u>특정 하나의 외벽이</u> 방문 되었는지 검사 👉 <strong>외벽 자리에 대응되는 특정 자리의 비트가 1 인지를 검사.</strong>
    <ul>
      <li>👉 <code class="language-plaintext highlighter-rouge">weak_visited &amp; (1 &lt;&lt; start)</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">start</code> 인덱스에 대응되는 ``weak_visited`의 비트가 1 인지를 보기 위해 AND 연산을 한다.</li>
          <li>점검 완료한 외벽 인덱스가 3 이라면 <code class="language-plaintext highlighter-rouge">1 &lt;&lt; 3</code>은 <code class="language-plaintext highlighter-rouge">00000001</code>을 3 번 왼쪽으로 민 것이니 <code class="language-plaintext highlighter-rouge">00001000</code>이 된다. 이것과 방문 체크 변수인 <code class="language-plaintext highlighter-rouge">weak_visited</code> 와 AND 연산을 했을 때 결과가 FALSE 이라면 <code class="language-plaintext highlighter-rouge">weak_visited</code>의 해당 자리는 0 비트라는 것이고 (해당 외벽 방문 안했다는 뜻) 결과가 TRUE 라면 1 비트가 맞다는 것이다. (해당 외벽 방문 했다는 뜻)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><a href="https://ansohxxn.github.io/algorithm/bitset/">(C++) 비트와 부분 집합 (+ STL bitset 활용)</a></p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET