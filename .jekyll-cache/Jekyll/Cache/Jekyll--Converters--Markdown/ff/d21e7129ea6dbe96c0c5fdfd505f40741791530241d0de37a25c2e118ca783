I"D<h1 id="dp-정수-삼각형">[DP] 정수 삼각형</h1>

<blockquote>
  <p>난이도 ⭐⭐⭐</p>
</blockquote>

<h2 id="문제">문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/97097877-9df87a00-16b9-11eb-8db8-6c3d34e595df.png" alt="image" /></p>

<p>꼭대기 꼭짓점부터 트리 타고 내려오듯이 한 줄씩 내려온다. 자신을 기준으로 왼쪽 혹은 오른쪽 대각선을 타고 내려온다.</p>

<p><br /></p>

<h2 id="내-풀이-">내 풀이 ⭕</h2>

<p>동적계획법 알고리즘을 공부하고난 후, 이를 사용하여 내 힘으로 풀어낸 첫 DP 문제였다. 정답 받아서 기분이 좋았다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">triangle</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">triangle</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    
    <span class="c1">// 초기값 (삼각형 밑변)</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">triangle</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">push_back</span><span class="p">(</span><span class="n">triangle</span><span class="p">.</span><span class="n">back</span><span class="p">()[</span><span class="n">i</span><span class="p">]);</span>
    
    <span class="c1">// DP</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">triangle</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="n">triangle</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
        
    <span class="n">answer</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>점화식</strong> 👉 현재 삼각형의 꼭짓점 숫자의 합 최대값 = Max [ 왼쪽 자식을 꼭짓점으로 한 삼각형의 숫자의 합 최대값, 오른쪽 자식을 꼭짓점으로 한 삼각형의 숫자의 합 최대값 ] + 현재 삼각형의 꼭짓점 수</p>
</blockquote>

<p>맨 위 꼭짓점인 7 에서 왼쪽 오른쪽 자식들 중 어떤 것을 각각 선택하면서 타고 내려가야 얼만큼의 최대값을 합산해낼 수 있는지를 구해야 한다. 동적 계획법에 맞게 점화식을 세워 보자면 위와 같다. 삼각형 밑변인 아래에서 부터 Bottom-Up 방식으로 타고 올라가면서 <code class="language-plaintext highlighter-rouge">dp</code> 배열에 값을 저장해나간다. 우선 삼각형 밑변을 나타내는 <code class="language-plaintext highlighter-rouge">dp</code>의 마지막 행들이 초기값이 되므로 이들은 각각 자기 자신으로 값을 설정하여 넣어준다.</p>

<ul>
  <li>triangle[4] : [4, 5, 2, 6, 5]
    <ul>
      <li>dp[4] 👉 [4, 5, 2, 6, 5]</li>
    </ul>
  </li>
  <li>triangle[3] : [2, 7, 4, 4]
    <ul>
      <li>dp[3] 👉 [Max(4, 5) + 2, Max(5, 2) + 7, Max(2, 6) + 4, Max(6, 5) + 4] = [7, 12, 10, 10]</li>
    </ul>
  </li>
  <li>triangle[2] : [8, 1, 0]
    <ul>
      <li>dp[3] 👉 [Max(7, 12) + 8, Max(12, 10) + 1, Max(10, 10) + 0] = [20, 13, 10]</li>
    </ul>
  </li>
  <li>triangle[1] : [3, 8]
    <ul>
      <li>dp[3] 👉 [Max(20, 13) + 3, Max(13, 10) + 8] = [23, 21]</li>
    </ul>
  </li>
  <li>triangle[0] : [7]
    <ul>
      <li>dp[4] 👉 [Max(23, 21) + 7] = [30]  ✨정답✨</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET