I"]+<h1 id="스택큐-프린터">[스택/큐] 프린터</h1>

<blockquote>
  <p>난이도 ⭐⭐</p>
</blockquote>

<h2 id="문제">문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/88759934-d9f96d00-d1a6-11ea-8028-2c5299d90d5a.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<p><br /></p>

<h2 id="내-풀이">내 풀이</h2>

<p>프로그래머스 고득점 Kit의 스택/큐 마지막 문제.. 어느정도 연습이 잘 됐나보다. 실패 없이 한방에 통과 ^ㅁ^</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 내림차순 정렬</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">priorities</span><span class="p">,</span> <span class="kt">int</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">print</span><span class="p">;</span> 
    <span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span>  <span class="n">waiting</span><span class="p">;</span> <span class="c1">// 인덱스, 우선 순위</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sorted</span><span class="p">;</span>
    
    <span class="cm">/* waiting 큐에 &lt;인덱스, 우선순위&gt; 쌍 삽입 */</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">waiting</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
    <span class="p">}</span>
    
    <span class="cm">/* 우선순위 벡터를 내림차순 정렬 후 sorted 큐에 삽입 */</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">priorities</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">priorities</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compare</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">sorted</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    
    
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">waiting</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="cm">/* sorted 큐는 내림차순 정렬되어있으므로 맨 앞 front() 원소는 최대값이다. */</span>

        <span class="cm">/* 대기 큐의 맨 앞 원소의 우선순위(second)가 우선순위 최대값보다 작다면 */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">waiting</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">sorted</span><span class="p">.</span><span class="n">front</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">waiting</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">waiting</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>  <span class="c1">// 대기 큐의 맨 뒤에 삽입 후 </span>
            <span class="n">waiting</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>                   <span class="c1">// 맨 앞은 제거. 즉 맨 앞에 있던걸 뒤에 줄서게 한 것. 나보다 더 빨리 프린트 되야할게 있다는 거니까!</span>
        <span class="p">}</span>
        <span class="cm">/* 내가 현재 최대 우선순위였다면 프린트해야함! */</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">print</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">waiting</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">first</span><span class="p">);</span>  <span class="c1">// 출력 큐에 인덱스(first)를 삽입</span>
            <span class="n">waiting</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>                      <span class="c1">// 대기 큐에선 삭제</span>
            <span class="n">sorted</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>                       <span class="c1">// 정렬 큐에서도 삭제해주기</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="cm">/* 최종적인 출력 순서가 되는 인덱스가 모인 print큐에서 location과 일치하는 인덱스 찾기 */</span>
    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">answer</span><span class="o">++</span><span class="p">;</span>    <span class="c1">// 마치 count </span>
        <span class="k">if</span> <span class="p">(</span><span class="n">location</span> <span class="o">==</span> <span class="n">print</span><span class="p">.</span><span class="n">front</span><span class="p">())</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">print</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>큐를 3 개 두었다.
    <ul>
      <li>💡 <strong>sorted 큐</strong>
        <ul>
          <li>우선순위 값이 담겨 있는 priorities 벡터 원소들을 내림 차순으로 정렬한 후 sorted 큐에 전부 삽입해준다.</li>
          <li><u>우선순위 값들이 내림차순 정렬</u>된 <code class="language-plaintext highlighter-rouge">&lt;int&gt;</code> 큐</li>
        </ul>
      </li>
      <li>💡 <strong>waiting 큐</strong>
        <ul>
          <li><u>대기 열이 될 큐</u>.</li>
          <li>sorted 큐에 정렬된대로 삽입하기 위해 priorities 벡터를 정렬했었는데 정렬 전의 인덱스 또한 기억해주기 위하여 <code class="language-plaintext highlighter-rouge">&lt;pair&lt;int, int&gt;</code> 형태의 큐로 정의했다.
            <ul>
              <li><u>(원래 인덱스, 우선순위)</u></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>💡 <strong>print 큐</strong>
        <ul>
          <li><u>최종적인 출력 순서</u>가 될 큐</li>
          <li><u>인덱스</u>만 들어갈 <code class="language-plaintext highlighter-rouge">&lt;int&gt;</code> 타입의 큐 이다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>시작
        <ul>
          <li>waiting 큐 <code class="language-plaintext highlighter-rouge">[(0, 2), (1, 1), (2, 3), (3, 2)]</code></li>
          <li>sorted 큐 <code class="language-plaintext highlighter-rouge">[3, 2, 2, 1]</code></li>
          <li>print 큐 <code class="language-plaintext highlighter-rouge">[]</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="다른-풀이">다른 풀이</h2>

<p><u>대기 인덱스</u>, <u>최종 출력 순서가 될 인덱스</u> 이렇게 각각 들어갈 큐 2개를 두고 <code class="language-plaintext highlighter-rouge">대기 인덱스</code> 큐의 원소 값으로 <em>priorities[원소]</em> 이런식으로 접근한 후 <em>*max_element(priorities.begin(),priorities.end())</em> 와 비교하여 <code class="language-plaintext highlighter-rouge">대기 인덱스</code> push/pop 한 다른 분의 풀이도 있었다. 이 풀이 좋은 것 같다.. 나처럼 굳이 큐를 3개 둘 필요는 없었던 것 같다. 사실 인덱스만 다뤄도 되고 !</p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET