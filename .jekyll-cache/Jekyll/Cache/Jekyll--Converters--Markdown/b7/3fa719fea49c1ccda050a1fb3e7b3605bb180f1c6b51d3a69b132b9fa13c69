I""<h2 id="식별자">식별자</h2>
<ul>
  <li>클래스
    <ul>
      <li>낙타표기법</li>
    </ul>
  </li>
  <li>메소드, 변수(필드)
    <ul>
      <li>첫 글자가 소문자</li>
    </ul>
  </li>
  <li>상수
    <ul>
      <li>모든 문자를 대문자로 표기하고 단어 사이에 ‘_‘를 넣어서 구분한다.</li>
    </ul>
  </li>
</ul>

<h2 id="변수의-종류">변수의 종류</h2>
<ul>
  <li>인스턴스 변수
    <ul>
      <li>객체가 소유하는 변수
        <ul>
          <li>클래스 정의에서 static이 아닌 필드</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>클래스 변수
    <ul>
      <li>객체가 공유하는 변수
        <ul>
          <li>클래스 정의에서 static 필드</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>지역변수
    <ul>
      <li>메서드 내부 또는 지역 블럭 내부에서 선언된 변수</li>
    </ul>
  </li>
</ul>

<h2 id="변수의-사용-범위">변수의 사용 범위</h2>
<h3 id="지역-변수">지역 변수</h3>
<ul>
  <li>해당 블럭이 종료될 때까지 유효하다.</li>
  <li>메서드가 실행될 때 만들어지고 끝나면 없어짐</li>
  <li>지역 변수는 초기값을 지정한 후 사용해야 한다.</li>
</ul>

<h3 id="인스턴스-변수나-클래스-변수">인스턴스 변수나 클래스 변수</h3>
<ul>
  <li>선언된 클래스 내부에서 사용 가능하다.</li>
  <li>클래스 외부에서의 사용 가능 여부는 접근제어자에 따라 다르다.</li>
</ul>

<h2 id="기본형-자료형">기본형 자료형</h2>
<p><img src="https://user-images.githubusercontent.com/73566453/158056636-00f70b07-c8d9-45a5-bbd0-16f1b9e5af98.png" alt="image" /></p>

<h2 id="상수">상수</h2>
<ul>
  <li>리터럴 또는 값이 변하지 않는 변수이다.</li>
  <li><code class="language-plaintext highlighter-rouge">final</code></li>
</ul>

<h2 id="참조형-자료형">참조형 자료형</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Array</code></li>
  <li><code class="language-plaintext highlighter-rouge">Class</code></li>
  <li><code class="language-plaintext highlighter-rouge">Interface</code></li>
</ul>

<blockquote>
  <p><span style="color:red">참조형 변수는 저장 공간에 참조 값을 저장한다.</span><br />
실제 데이터는 별도의 공간에 저장됨<br />
<span style="color:red">기본형 변수는 저장 공간에 값 자체를 저장한다.</span></p>
</blockquote>

<h2 id="형변환">형변환</h2>
<h3 id="묵시적-자료형의-변환">묵시적 자료형의 변환</h3>
<p>작은 타입에서 큰 타입으로는 자동 형변환</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">byte → short → int → long → float → double</code></li>
</ul>

<h3 id="명시적-자료형의-변환">명시적 자료형의 변환</h3>
<p>큰 타입에서 작은 타입으로 변환할 때는 명시적 형변환이 필요하다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">(자료형)피연산자</code></li>
</ul>

<h2 id="명령-행-매개-변수">명령 행 매개 변수</h2>
<p><img width="1082" alt="image" src="https://user-images.githubusercontent.com/73566453/158057583-e8992c99-321c-4122-9de0-ad63b8fd30df.png" /></p>

<p><img src="https://user-images.githubusercontent.com/73566453/158057707-23e02450-7ec4-40b4-a416-d7829a0bea48.png" alt="image" /></p>

<h2 id="제어문">제어문</h2>
<ul>
  <li>실행의 흐름을 바꿈</li>
</ul>

<h3 id="제어문의-종류">제어문의 종류</h3>
<ul>
  <li>선택문
    <ul>
      <li>조건에 따른 문장의 선택
        <ul>
          <li>if문, switch문</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>반복문
    <ul>
      <li>조건에 따른 문장의 반복
        <ul>
          <li>for문</li>
          <li>while문</li>
          <li>do-while문</li>
          <li>for-each문
            <ul>
              <li>개선된 for문</li>
              <li>배열이나 컬렉션의 원소들을 차례로 다룰 때 편리</li>
              <li><code class="language-plaintext highlighter-rouge">for(변수선언:배열){문장,,,}</code></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>점프문
    <ul>
      <li>분기문
        <ul>
          <li>return문</li>
          <li>break문
            <ul>
              <li>break문을 포함하는 가장 가까운 반복문이나 switch문의 실행을 끝낸다.</li>
              <li>레이블을 사용하여 특정 블럭 또는 특정 반복문을 빠져나갈 수 있다.
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">break 레이블;</code></li>
                  <li>예를 들면 <code class="language-plaintext highlighter-rouge">break DONE;</code> 이런식으로 사용</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>continue문
            <ul>
              <li>반복문 안에서 사용함</li>
              <li>반복문을 빠져나가지 않으면서 즉시 다음 반복으로 넘어감</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="선택문">선택문</h2>
<ul>
  <li>if문</li>
  <li>if-else문</li>
  <li>switch문
    <ul>
      <li>다중 선택 구조</li>
      <li>case 조건은 정수와 호환되거나 String 값</li>
      <li>default는 생략 가능, 어떤 case에도 해당되지 않는 경우 매칭된다.</li>
      <li>만족되는 case를 실행한 후, break문을 만날 때까지 계속 실행된다.</li>
    </ul>
  </li>
</ul>

:ET