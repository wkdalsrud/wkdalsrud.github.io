I"M<h1 id="dp-도둑질">[DP] 도둑질</h1>

<blockquote>
  <p>난이도 ⭐⭐⭐⭐</p>
</blockquote>

<h2 id="문제">문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/97795133-c6e2b700-1c45-11eb-9aff-326e82a17a9f.png" alt="image" /></p>

<p>이 문제를 DP 적으로 생각하는게 어려웠다. 배울게 많았던 문제이니 반복해서 보자!!</p>

<p><br /></p>

<h2 id="풀이">풀이</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">money</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">tempMax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">money</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>  <span class="c1">// 0 부터 차례대로 해당 원소까지 털었을 때의 돈의 최댓값</span>
    
    <span class="c1">// 1. 첫 번째 집을 털었을 때(마지막 집은 털지 못한다.)의 전체</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">money</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">money</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">money</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">dp</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">dp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
    <span class="n">tempMax</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">dp</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dp</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    
    <span class="c1">// 2. 첫 번째 집을 털지 않았을 때의 전체</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">money</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">money</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">money</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    
    <span class="c1">// 1, 2 두 경우 중 Max</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">tempMax</span><span class="p">,</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">dp</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dp</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>동적 계획법은 피보나치 수열 구하는 것과 비슷하다는 것 기억하자~~~</p>
</blockquote>

<p>A B C D 이렇게 나란히 집이 동그랗게 마주보며 있을 때, A 를 털었다면 A 의 양옆에 있는 B 와 D 의 방범 장치가 울리므로 B 와 D 는 털 수 없게 된다. A 와 이웃하지 않은 C 만 털 수 있다.</p>

<ul>
  <li><strong>점화식</strong> 👉 dp[i] = max(dp[i - 1], dp[i - 2] + money[i])
    <ul>
      <li><code class="language-plaintext highlighter-rouge">dp[i]</code> : <code class="language-plaintext highlighter-rouge">0</code> 인덱스를 가진 집부터 <code class="language-plaintext highlighter-rouge">i</code> 인덱스를 가진 집<u>'까지'</u> 의 모든 경우를 고려해서 누적 계산해온 돈의 최대 값
        <ul>
          <li>현재 집의 운명은 다음과 같이 두가지 경우다.
            <ul>
              <li><u>현재 집을 털지 않는 경우</u> 👉 0 ~ 이전집까지의 돈의 최대값을 물려받는다.
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">dp[i - 1]</code></li>
                </ul>
              </li>
              <li>이전 집은 털지 않고, <u>현재 집을 터는 경우</u>  👉 0 ~ 이전이전집까지의 돈의 최대값에 현재 집의 돈을 더한다. 이전집까지의 최대값은 고려하지 않는다.
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">dp[i - 2] + money[i]</code></li>
                </ul>
              </li>
            </ul>
          </li>
          <li>위 두 경우 중 더 큰 돈을 가지게 되는 쪽이 <code class="language-plaintext highlighter-rouge">i</code> 인덱스를 가진 집까지의 집들을 터는 모든 경우들의 돈의 최대값이 될 것이다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">dp[i - 1]</code>가 더 크면  <code class="language-plaintext highlighter-rouge">dp[i]</code> 👉 <code class="language-plaintext highlighter-rouge">dp[i - 1]</code></li>
              <li><code class="language-plaintext highlighter-rouge">dp[i - 2] + money[i]</code>가 더 크면  <code class="language-plaintext highlighter-rouge">dp[i]</code> 👉 <code class="language-plaintext highlighter-rouge">dp[i - 2] + money[i]</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>매 집마다 현재 집을 털었을 때⭕, 안털었을때❌ 두가지 경우가 있을 텐데 이 중 더 큰 최대값을 가지는 경우를 채택하면 된다.</li>
    </ul>
  </li>
  <li>첫 번째집, 마지막 번째 집 동시에 둘 다 훔칠 수는 없기 때문에 아래와 같이 두가지 조건으로 나누어 동적계획법 계산을 진행한다. 각각 두가지 조건에서 얻은 최대값을 비교해서 최종 최대값을 선택하면 된다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">answer</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">tempMax</span><span class="p">,</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">dp</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dp</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
</code></pre></div>    </div>
    <ul>
      <li>첫 번째 집을 털었다면 마지막 집은 털 수 없다.
        <ul>
          <li>첫 번째 집 <code class="language-plaintext highlighter-rouge">dp[0]</code>이 고려할 수 있는 경우의 수는 1 가지 뿐. 첫 번째 집을 털었을 때. <code class="language-plaintext highlighter-rouge">money[0]</code> ⭕</li>
          <li>두 번째 집 <code class="language-plaintext highlighter-rouge">dp[1]</code>이 고려할 수 있는 경우의 수는 1 가지 뿐. 두 번째 집은 못 털 때. 따라서 두 번째 집 까지의 털 수 있는 돈의 최대값은 여전히 첫번째 집에서 털었던 <code class="language-plaintext highlighter-rouge">money[0]</code> 이다. <code class="language-plaintext highlighter-rouge">dp[0]</code> ⭕❌</li>
          <li>세 번째 집 <code class="language-plaintext highlighter-rouge">dp[2]</code>이 고려할 수 있는 경우의 수는 2 가지. 아래 두 경우 中 더 큰 최대값을 채택하면 바로 세 번째집 까지의 털 수 있는 돈의 최대값이 된다.
            <ul>
              <li>세 번째 집을 털지 않는 경우 👉 <code class="language-plaintext highlighter-rouge">dp[1]</code> ⭕❌❌</li>
              <li>두 번째 집을 털지 않고 세 번째 집을 터는 경우 👉 <code class="language-plaintext highlighter-rouge">dp[0] + money[2]</code> ⭕❌⭕</li>
              <li>위 2 가지 경우 중 더 큰쪽을 세 번째집까지 얻을 수 있는 최대 값인 <code class="language-plaintext highlighter-rouge">dp[2]</code> 값으로 업뎃한다.</li>
            </ul>
          </li>
          <li>네 번째 집 <code class="language-plaintext highlighter-rouge">dp[3]</code>이 고려할 수 있는 경우의 수는 2 가지. 아래 두 경우 中 더 큰 최대값을 채택하면 바로 네 번째집 까지의 털 수 있는 돈의 최대값이 된다.
            <ul>
              <li>네 번째 집을 털지 않는 경우 👉 <code class="language-plaintext highlighter-rouge">dp[2]</code> (⭕❌❌와 ⭕❌⭕ 중 큰 것중에 선택했었다. <code class="language-plaintext highlighter-rouge">dp[2]</code> 값에 따라 ⭕❌❌❌ 혹은 ⭕❌⭕❌ 가 될 것이다.)</li>
              <li>세 번째 집을 털지 않고 네 번째 집을 터는 경우 👉 <code class="language-plaintext highlighter-rouge">dp[1] + money[3]</code> (⭕❌❌⭕)</li>
              <li>위 2 가지 경우 중 더 큰쪽을 네 번째집까지 얻을 수 있는 최대 값인 <code class="language-plaintext highlighter-rouge">dp[3]</code> 값으로 업뎃한다.</li>
            </ul>
          </li>
          <li>마지막 번째 집이 고려할 수 있는 경우의 수는 1 가지 뿐. 첫번째 집이 털렸다고 가정하고 시작했기 때문에 마지막 집은 털리면 안된다. 따라서 <code class="language-plaintext highlighter-rouge">dp[n - 2]</code> 이다.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 첫 번째 집을 털었을 때(마지막 집은 털지 못한다.)의 전체</span>
<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">money</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">money</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>   <span class="c1">// for문 에서 마지막 번째 집은 제외하고 돌린다. 물론 첫번째 두번째집도! </span>
    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">money</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="n">dp</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">dp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
<span class="n">tempMax</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">dp</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dp</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>첫 번째 집을 털지 않았다면 마지막 집은 딱히 제한 없다.
        <ul>
          <li>첫 번째 집 <code class="language-plaintext highlighter-rouge">dp[0]</code>이 고려할 수 있는 경우의 수는 1 가지 뿐. 첫 번째 집을 털지 않았을 때. <code class="language-plaintext highlighter-rouge">dp[0] = 0</code> ❌</li>
          <li>두 번째 집 <code class="language-plaintext highlighter-rouge">dp[1]</code>이 고려할 수 있는 경우의 수는 2 가지. ❌❌는 0 이므로 두 번째 집을 터는 ❌⭕ 경우가 최대값이 된다. <code class="language-plaintext highlighter-rouge">dp[1] = money[1]</code></li>
          <li>세 번째 집 <code class="language-plaintext highlighter-rouge">dp[2]</code>이 고려할 수 있는 경우의 수는 2 가지.
            <ul>
              <li>세 번째 집을 털지 않는 경우 👉 <code class="language-plaintext highlighter-rouge">dp[1]</code> ❌⭕❌</li>
              <li><u>두 번째 집을 털지 않고</u> 세 번째 집을 터는 경우 👉 <code class="language-plaintext highlighter-rouge">dp[0] + money[2]</code> ❌<u>❌</u>⭕
                <ul>
                  <li><strong>실제로 두번째 집을 털기로 했건 안했건 그건 상관 없다. 그냥 여러 경우들 중에서 최대값을 선택하는 것 뿐이니까 ! <code class="language-plaintext highlighter-rouge">dp[1]</code>가 ❌⭕ 경우의 돈을 최대값으로 선택했다고 해서 두번째 집을 실제로 털었다는게 아니라 그냥 그 경우가 두번째집까지에선 가장 큰 돈을 가질 수 있는 경로였다는 것 뿐이다. 헷갈리지 말자! 세 번째 집까지 터는 모든 경우들 중 ❌❌⭕ 가 가장 많은 돈을 털 수 있다면 <code class="language-plaintext highlighter-rouge">dp[1]</code>과 전혀 상관 없이 ❌❌⭕로 털었을 때의 돈이 <code class="language-plaintext highlighter-rouge">dp[2]</code> 값으로 업뎃 되는 것이다.</strong>
                    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2. 첫 번째 집을 털지 않았을 때의 전체</span>
<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">money</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">money</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">money</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</code></pre></div>                    </div>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET