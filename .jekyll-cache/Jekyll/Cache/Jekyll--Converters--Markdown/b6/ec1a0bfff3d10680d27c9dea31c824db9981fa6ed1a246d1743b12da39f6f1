I"B<iframe width="891" height="501" src="https://www.youtube.com/embed/Bujy_-O99xQ?list=PL6YHvWRMtz7DS3hVaqMazHujPcKVfblQa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p><a href="https://ansohxxn.github.io/cpp/chapter3-3/">C++ Chapter 3.3 : 비트끼리의 연산, 비트 플래그, 비트 마스크</a></p>

<h2 id="-비트를-이용한-부분-집합">🚀 비트를 이용한 부분 집합</h2>

<blockquote>
  <p>원소가 <code class="language-plaintext highlighter-rouge">n</code>개 인 집합이 있다고 할 때, <code class="language-plaintext highlighter-rouge">n</code> 자리의 비트를 사용하여 이 집합의 부분 집합을 표현할 수 있다. 👉 <u>1 비트에 해당하는 자리만 활성화 한다고 생각하면 된다.</u></p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">n</code>개의 원소로 이루어진 집합이 있다고 할 때 <strong>부분 집합의 총 개수</strong>
    <ul>
      <li>\(2^{n}\) 개</li>
      <li><code class="language-plaintext highlighter-rouge">1 &lt;&lt; n</code> 개와도 같다.</li>
    </ul>
  </li>
</ul>

<hr />

<p>{ A, B, C } 라는 집합이 있을 때 8 가지의 부분 집합을 구할 수 있다. <strong>비트 값이 1 이면 그 비트에 대응되는 자리에 있는 원소가 부분 집합에 포함되어 있고, 비트 값이 0 이면 그 비트에 대응되는 자리에 있는 원소가 부분 집합에 포함되어 있지 않다고 생각해보면 된다.</strong></p>

<ul>
  <li>0 👉 <code class="language-plaintext highlighter-rouge">000</code> : { } <em>공집합</em></li>
  <li>1 👉 <code class="language-plaintext highlighter-rouge">001</code> : {A} <em>인덱스 0 에 해당하는 자리의 비트 값이 1 이므로</em></li>
  <li>2 👉 <code class="language-plaintext highlighter-rouge">010</code> : {B} <em>인덱스 1 에 해당하는 자리의 비트 값이 1 이므로</em></li>
  <li>3 👉 <code class="language-plaintext highlighter-rouge">011</code> : {A,B} <em>인덱스 0,1 에 해당하는 자리의 비트 값이 1 이므로</em></li>
  <li>4 👉 <code class="language-plaintext highlighter-rouge">100</code> : {C} <em>인덱스 2 에 해당하는 자리의 비트 값이 1 이므로</em></li>
  <li>5 👉 <code class="language-plaintext highlighter-rouge">101</code> : {A,C} <em>인덱스 0,2 에 해당하는 자리의 비트 값이 1 이므로</em></li>
  <li>6 👉 <code class="language-plaintext highlighter-rouge">110</code> : {B,C} <em>인덱스 1,2 에 해당하는 자리의 비트 값이 1 이므로</em></li>
  <li>7 👉 <code class="language-plaintext highlighter-rouge">111</code> : {A,B,C} <em>인덱스 0,1,2 에 해당하는 자리의 비트 값이 1 이므로</em></li>
</ul>

<hr />

<h3 id="-모든-부분-집합-구하기">🔥 모든 부분 집합 구하기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">printSubsets</span><span class="p">(</span><span class="kt">char</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> 
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">))</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">","</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" }"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">char</span> <span class="n">data</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="sc">'A'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'C'</span><span class="p">,</span> <span class="sc">'D'</span> <span class="p">};</span>
    <span class="n">printSubsets</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

{  }
{ A, }
{ B, }
{ A,B, }
{ C, }
{ A,C, }
{ B,C, }
{ A,B,C, }
{ D, }
{ A,D, }
{ B,D, }
{ A,B,D, }
{ C,D, }
{ A,C,D, }
{ B,C,D, }
{ A,B,C,D, }
</code></pre></div></div>

<p><br /></p>

<h3 id="-두-원소의-합이-7이-되는-부분집합의-개수-구하기">🔥 두 원소의 합이 7이 되는 부분집합의 개수 구하기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">Arr</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">countBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">++</span><span class="n">count</span><span class="p">;</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">arr</span><span class="p">[])</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">countBits</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 원소가 2 개인 부분집합만 따질거라.. 즉, 1 비트의 개수가 2 개인 비트만 취급할 것</span>

        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> 
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="c1">// i 비트의 j 번째 자리가 1 인지 검사 (1이 맞다면 arr[j]은 부분집합에 포함할 원소)</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> <span class="o">++</span><span class="n">count</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>  
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span> <span class="p">};</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">arr</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 3 을 출력할 것이다. {1, 6} {2, 5} {3, 4}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="-집합의-원소-개수">🔥 집합의 원소 개수</h3>

<h4 id="-stl-의-bitset-사용">✈ STL 의 bitset 사용</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">208</span><span class="p">;</span>
    <span class="n">bitset</span><span class="o">&lt;</span><span class="mi">8</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span> <span class="c1">// n 을 8 bit 로 표현한 set 변수 (0 ~ 255 표현 가능)</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">set</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">set</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 원소의 개수나 마찬가지</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

11010000
3
</code></pre></div></div>

<blockquote>
  <p>#include &lt;bitset&gt;</p>
</blockquote>

<p>&lt;bitset&gt;의 <code class="language-plaintext highlighter-rouge">count()</code> 함수를 사용하면, 해당 변수에서 <strong>1 비트의 개수</strong>를 리턴해준다. 즉 이는 <u>부분 집합의 원소 개수</u>라고 대응시켜 생각해볼 수도 있다.</p>

<p><br /></p>

<h4 id="-구현하기">✈ 구현하기</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">208</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// 아래와 같은 방식으로 차례대로 각 자리마다 1 인지를 검사하며 된다.</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// n 은 언젠가 0 이 됨</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">++</span><span class="n">count</span><span class="p">;</span> <span class="c1">// 00000001 과 비교</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 오른쪽으로 하나 씩 밀어서 없앰</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

3
</code></pre></div></div>

<p><br /></p>

<h2 id="-정리">🚀 정리</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">n</code>개의 원소로 이루어진 집합이 있다고 할 때
    <ul>
      <li>부분 집합의 개수 👉 <strong><em>1 « n</em></strong></li>
      <li><u>원소가 있는지 확인하고 싶을 때</u> 👉 <strong><em>i &amp; (1 « j)</em></strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">i</code> 비트 안에 <code class="language-plaintext highlighter-rouge">j</code> 비트 자리가 1 인지 확인하고 싶을 때</li>
          <li>결과가 0 이 아니면 존재 하는 것
            <ul>
              <li>ex) 0101 &amp; (1 « 2) = 0101 &amp; 0100 = 0100  즉, 2번째 자리에 해당하는 비트가 1 인지를 확인할 수 있다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><u>원소를 추가하고 싶을 때</u> 👉 <strong><em>i | (1 « j)</em></strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">i</code> 비트 안에 <code class="language-plaintext highlighter-rouge">j</code> 비트 자리를 1 로 만든다.
            <ul>
              <li>ex) 0101 | (1 « 1) = 0101 | 0010 = 0111  즉, 1번째 자리를 1 로 만들어줄 수 있었다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><u>원소를 삭제하고 싶을 때</u> 👉 <strong><em>i &amp; ~(1 « j)</em></strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">i</code> 비트 안에 <code class="language-plaintext highlighter-rouge">j</code> 비트 자리를 0 으로 만든다.
            <ul>
              <li>ex) 0101 &amp; ~(1 « 2) = 0101 &amp; ~0100 = 0101 &amp; 1011 = 0001  즉, 2번째 자리를 0 으로 만들어줄 수 있었다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET