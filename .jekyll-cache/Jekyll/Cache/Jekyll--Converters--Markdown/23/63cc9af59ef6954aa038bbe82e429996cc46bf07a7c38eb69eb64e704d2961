I"G,<h1 id="-자동-완성">📌 자동 완성</h1>

<blockquote>
  <p>난이도 ⭐⭐⭐⭐</p>
</blockquote>

<h2 id="-문제">🚀 문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/115253586-7ca7b080-a167-11eb-972e-419ebd3f176b.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/115253617-83362800-a167-11eb-9031-a659b5986a46.png" alt="image" /></p>

<p><br /></p>

<h2 id="-내-풀이-">🚀 내 풀이 ⭕</h2>

<blockquote>
  <p>트라이에 관한 더 자세한 설명은 이 포스트를 참고해주세요. 👉 <a href="https://ansohxxn.github.io/algorithm/trie/">(C++) 문자열 집합 : 트라이 자료구조</a></p>
</blockquote>

<p>이 문제는 <strong>트라이 자료구조</strong> 문제로, 아래 두 문제와 유사하다. 두 문제를 짬뽕해서 푸는 느낌!!</p>

<ul>
  <li><a href="https://ansohxxn.github.io/boj/5670/">[백준 5670][💚4] 휴대폰 자판 (트라이, 원하는만큼 입력 받기)</a>
    <ul>
      <li>이 문제도 접두사를 가지고 자동완성 가능 여부를 판별하는 문제인데, 이 백준 5670 번 문제는 현재 이 문제와 자동완성 가능 여부 판별 기준이 다르다.
        <ul>
          <li>백준 “휴대폰 자판” 👉 <strong>다음 글자</strong> 후보가 유일해야 <strong>다음 글자</strong>는 자동완성이 가능
            <ul>
              <li>자식이 딱 한개인지만 가리면 됐다. 중복 되는게 없거나 접두사가 싹 다 공통적이거나 둘 중 하나여야 가능하기 때문이다.</li>
              <li><code class="language-plaintext highlighter-rouge">word</code>, <code class="language-plaintext highlighter-rouge">world</code> 가 있다면 <code class="language-plaintext highlighter-rouge">wo</code> 까지만 입력 되어도 다음 글자 후보는 <code class="language-plaintext highlighter-rouge">r</code> 뿐이므로 <code class="language-plaintext highlighter-rouge">r</code>은 자동입력이 됨.</li>
            </ul>
          </li>
          <li>카카오 “자동완성” 👉 <strong>뒤의 문자열</strong> 후보가 유일해야 <strong>뒤의 문자열</strong>은 자동완성이 가능
            <ul>
              <li>자식이 한개이되 공통된 접두사이면 안됨. 유일한 문자열이어야 함. 자식이 한개라는 것은 그게 유일해서일 수도 있고 싹 다 공통적인 접두사라 그럴 수도 있어서 이 자식 한 개라는 정보만으로 판별할 수는 없음. 그러므로 노드마다 접두사 횟수 카운팅 미리 해놓아야 한다.</li>
              <li><code class="language-plaintext highlighter-rouge">word</code>, <code class="language-plaintext highlighter-rouge">world</code> 가 있다면 <code class="language-plaintext highlighter-rouge">wo</code> 까지 입력 해도 그 뒤의 문자열이 <code class="language-plaintext highlighter-rouge">word</code>가 될지, <code class="language-plaintext highlighter-rouge">world</code>가 될지 모르기 때문에 자동 입력 되지 않음.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="https://ansohxxn.github.io/programmers/133/">[C++로 풀이] 가사 검색 (트라이 자료구조, 문자열 검색, 이분 탐색) ⭐⭐⭐⭐</a>
    <ul>
      <li>이 문제는 오직 중복 되는게 없고 유일한 접두사여야지만 자동완성이 가능하기 때문에 카카오 가사 검색 문제처럼 노드마다 중복되는 횟수를 저장하고 있어야 한다. 즉, 첫 문자부터 이 문자까지를 접두사로 가지는 문자열의 개수를 미리 세 놓아야 한다.
        <ul>
          <li>트라이의 특성 상, 가사 검색 문제처럼 트라이에 문자열들 추가할 떄 노드마다 1 씩 더해주기만 하면 자연스럽게 구할 수 있게 된다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li>1️⃣ 삽입 👉 모든 노드에 <code class="language-plaintext highlighter-rouge">count</code> 변수를 두어, 이 노드를 지날 떄마다 1 증가시킨다. 즉, 중복 접두사 횟수를 구해놓도록!</li>
  <li>2️⃣ 탐색 👉 해당 글자(=노드)까지를 접두사로 가지는 문자열의 개수가 1 개일 떄만 자동완성 가능. 2 개 이상이라면 수동 입력 해야 하므로 입력 횟수를 카운팅하면 된다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unordered_map&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Trie</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">Trie</span><span class="o">*&gt;</span> <span class="n">child</span><span class="p">;</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">Insert</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Trie</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
                <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Trie</span><span class="p">;</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
            <span class="n">now</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">AutoComplete</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">numOfInput</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 모든 첫 문자들은 무조건 입력해야하니.. 1 에서 시작</span>
        <span class="n">Trie</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="n">child</span><span class="p">[</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="c1">// 루트 말고 첫 문자에서 시작하기</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">numOfInput</span><span class="o">++</span><span class="p">;</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">numOfInput</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">Trie</span> <span class="n">root</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">string</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="p">)</span>
        <span class="n">root</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">word</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">string</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="p">)</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="n">root</span><span class="p">.</span><span class="n">AutoComplete</span><span class="p">(</span><span class="n">word</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/115271376-3dce2680-a178-11eb-8a87-fe517c90ff4f.png" alt="image" /></p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET