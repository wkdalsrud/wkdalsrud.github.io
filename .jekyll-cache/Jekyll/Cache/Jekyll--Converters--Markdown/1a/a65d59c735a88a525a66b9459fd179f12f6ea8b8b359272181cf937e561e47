I"!_<h1 id="-수식-최대화">📌 수식 최대화</h1>

<blockquote>
  <p>난이도 ⭐⭐</p>
</blockquote>

<h2 id="-문제">🚀 문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/107517287-eb5d1080-6bf0-11eb-9437-f2a2c2de61e1.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/107517316-f1eb8800-6bf0-11eb-9319-f2ee9bfae3f9.png" alt="image" /></p>

<p><br /></p>

<h2 id="-내-풀이-">🚀 내 풀이 ⭕</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">long</span> <span class="kt">long</span> <span class="nf">calculate</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">a</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">b</span><span class="p">,</span> <span class="kt">char</span> <span class="n">op</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'+'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'-'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'*'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">long</span> <span class="kt">long</span> <span class="nf">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">expression</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">record_operand</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">record_operator</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">temp</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">expression</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span>
            <span class="n">temp</span> <span class="o">+=</span> <span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">record_operator</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">record_operand</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">stoll</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">record_operand</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">stoll</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">perm</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">};</span>
    <span class="n">string</span> <span class="n">op</span> <span class="o">=</span> <span class="s">"+-*"</span><span class="p">;</span>
    <span class="k">do</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">temp_operand</span> <span class="o">=</span> <span class="n">record_operand</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">temp_operator</span> <span class="o">=</span> <span class="n">record_operator</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">perm</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">temp_operator</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">temp_operator</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">op</span><span class="p">[</span><span class="n">perm</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span> <span class="p">{</span>
                    <span class="kt">long</span> <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="n">calculate</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">temp_operand</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">temp_operator</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>

                    <span class="n">temp_operand</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
                    <span class="n">temp_operand</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
                    <span class="n">temp_operand</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">res</span><span class="p">);</span>

                    <span class="n">temp_operator</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">temp_operator</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                    <span class="n">j</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">abs</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">perm</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">perm</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="-연산자와-피연산자-구분하기">✈ 연산자와 피연산자 구분하기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">record_operand</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">record_operator</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">temp</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">expression</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span>
            <span class="n">temp</span> <span class="o">+=</span> <span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">record_operator</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">expression</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">record_operand</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">stoll</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">record_operand</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">stoll</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>
</code></pre></div></div>

<ul>
  <li>“100-200*300-500+20” 을 예로 들자면
    <ul>
      <li><code class="language-plaintext highlighter-rouge">record_operand</code> 👉 {100, 200, 300 , 500, 20}</li>
      <li><code class="language-plaintext highlighter-rouge">record_operator</code> 👉 {‘-‘, ‘*’, ‘-‘, ‘+’}</li>
    </ul>
  </li>
  <li>필연적으로 피연산자의 총 개수가 연산자의 총 개수보다 딱 한개 더 많을 수 밖에 없다.</li>
  <li><code class="language-plaintext highlighter-rouge">operand[i]</code>와 <code class="language-plaintext highlighter-rouge">operand[i + 1]</code> 두 피연산자를 <code class="language-plaintext highlighter-rouge">operator[i]</code> 연산자로 연산하는 인덱스 규칙을 가진다.</li>
</ul>

<p>맨 끝에는 연산자가 없다. 연산자를 만날 때만 <code class="language-plaintext highlighter-rouge">record_operand</code> 에 피연산자를 추가했었기 때문에 for문이 끝나고 나오면 마지막 피연산자가 아직 <code class="language-plaintext highlighter-rouge">record_operand</code> 에 추가가 되지 못한 상태일 것이다. 그래서 for문 나와서 한번 더 추가를 해준다. 코드를 이렇게 특정 경우에만 어떤 요소가 반영 되도록 짜는 경우엔 반복문이 끝나고 마지막 요소가 반영되지 못하지는 않을까 하는 생각을 꼭 하자.</p>

<p><br /></p>

<h3 id="-연산자끼리의-순열-우선순위-순서-종류는-3--6가지">✈ 연산자끼리의 순열 (우선순위 순서 종류는 3! = 6가지)</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">perm</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">};</span>
    <span class="n">string</span> <span class="n">op</span> <span class="o">=</span> <span class="s">"+-*"</span><span class="p">;</span> <span class="c1">// '+' 의 인덱스 0. '-' 의 인덱스 1. '*' 의 인덱스 2.</span>
    <span class="k">do</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">temp_operand</span> <span class="o">=</span> <span class="n">record_operand</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">temp_operator</span> <span class="o">=</span> <span class="n">record_operator</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">perm</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">temp_operator</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">temp_operator</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">op</span><span class="p">[</span><span class="n">perm</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span> <span class="p">{</span>  <span class="c1">// 연산자 찾은 경우 연산 시작! </span>
                    <span class="kt">long</span> <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="n">calculate</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">temp_operand</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">temp_operator</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>

                    <span class="n">temp_operand</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
                    <span class="n">temp_operand</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span> <span class="c1">// 위의 삭제로 앞으로 한칸 땡겨져 왓을테니 그대로 j 위치 삭제하면 된다.</span>
                    <span class="n">temp_operand</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">res</span><span class="p">);</span> <span class="c1">// 위의 삭제로 앞으로 한칸 땡겨져 왓을테니 그대로 j 위치에 삽입하면 된다.</span>

                    <span class="n">temp_operator</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">temp_operator</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
                    <span class="c1">// 이 경우엔 j++ 하지 않는다. temp_operator 원소가 삭제되어서 앞으로 한 칸 땡겨졌을테니 그대로 다음 반복에서 j 인덱스 검사하면 된다.</span>
                <span class="p">}</span>
                <span class="k">else</span>
                    <span class="n">j</span><span class="o">++</span><span class="p">;</span>  <span class="c1">// 이번 연산자 못 찾은 경우에만 j++</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">abs</span><span class="p">(</span><span class="n">temp_operand</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="c1">// answer에는 최대값만 들어가게끔. 음수는 양수로 바꾼다 했으니 절대값만 취함.</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">perm</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">perm</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
</code></pre></div></div>

<ul>
  <li>순열 구하기
    <ul>
      <li>사실 연산자가 3 개 뿐이라 연산자끼리의 나올 수 있는 순열은 <code class="language-plaintext highlighter-rouge">3! = 6</code> 가지 뿐이다. 그래서 굳이 <em>next_permutation</em> 안 쓰고 6 가지 연산자 순열을 string 배열에 담아두고 갖다 쓰는게 훨씬 간단하지만 <em>next_permutation</em> 연습 한번 해보려고 일부러 사용했다.</li>
      <li><em>next_permutation</em> 은 원소들이 크기를 비교할 수 있어야 사용할 수 있기 때문에 “+-*” 자체를 <em>next_permutation</em> 로 정렬시키며 다음 순열을 구하기엔 애로사항이 있지 않을까 싶었다. 따라서 <code class="language-plaintext highlighter-rouge">perm</code> { 0, 1, 2 } 배열을 통하여 이 것을 <em>next_permutation</em> 시키고 연산자는 이 인덱스에 대응하도록 하였다.
        <ul>
          <li>예를 들어 현재 <code class="language-plaintext highlighter-rouge">perm</code>모양이 {1, 2, 0} 이라면 연산자 우선순위는 <code class="language-plaintext highlighter-rouge">*  &gt;  +  &gt;  -</code> 인게 된다.
            <ul>
              <li>차례대로 [<code class="language-plaintext highlighter-rouge">피연산자 * 피연산자</code> 를 모두 계산 👉  <code class="language-plaintext highlighter-rouge">피연산자 + 피연산자</code> 를 모두 계산 👉 <code class="language-plaintext highlighter-rouge">피연산자 - 피연산자</code> 를 모두 계산] 이 순서대로 반복문을 진행하면 된다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>연산 후
    <ul>
      <li>두 피연산자 삭제</li>
      <li>두 피연산자의 연산 결과 해당 자리에 삽입</li>
      <li>연산자 삭제</li>
    </ul>
  </li>
  <li>모든 연산이 다 끝나고 난 후 (즉, 해당 순열의 3개의 연산자 모두 연산 완료)
    <ul>
      <li>필연적으로 <code class="language-plaintext highlighter-rouge">temp_operand</code>에는 하나의 원소만 남게 된다. <strong>이게 연산자 우선순위가 이런 순서일 때의 expression 최종 연산 결과가 된다.</strong> (<code class="language-plaintext highlighter-rouge">temp_operator</code>는 비워짐)</li>
    </ul>
  </li>
  <li>우선순위 순열이 바뀔 때마다 새롭게 연산해야하므로 삭제되어 비워지고 하나밖에 안남은 연산자, 피연산자 집합을 새로 초기화 해야 한다.
    <ul>
      <li>그래서 <code class="language-plaintext highlighter-rouge">record_operand</code>, <code class="language-plaintext highlighter-rouge">record_operator</code>을 그대로 안쓰고 매 순열마다 이를 복사한 <code class="language-plaintext highlighter-rouge">temp_operand</code>, <code class="language-plaintext highlighter-rouge">temp_operator</code>을 새로 만들어주고 이걸로 연산을 하는 것이다.</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET