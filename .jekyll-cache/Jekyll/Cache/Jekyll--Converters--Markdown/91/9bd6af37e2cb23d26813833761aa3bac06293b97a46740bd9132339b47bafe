I"Ta<h1 id="-캐시">📌 캐시</h1>

<blockquote>
  <p>난이도 ⭐⭐</p>
</blockquote>

<h2 id="-문제">🚀 문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/106448339-f95eb300-64c5-11eb-9915-daabe99d7971.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/106448360-ff549400-64c5-11eb-95dc-d3c775e85f67.png" alt="image" /></p>

<p><br /></p>

<h2 id="-내-풀이-">🚀 내 풀이 ⭕</h2>

<h3 id="-lru-캐싱-알고리즘">✈ LRU 캐싱 알고리즘</h3>

<ul>
  <li>가장 오랫동안 사용 안한 것이 <em>캐싱 큐</em>의 가장 앞에 있어야 한다.</li>
  <li>
    <p>가장 최근에 사용한 것이 <em>캐싱 큐</em>의 가장 뒤에 있어야 한다.</p>
  </li>
  <li>사용하려는 대상이 <u>💜캐싱 큐에 존재한다면 (즉, 캐시가 있다면)</u> 새롭게 로드할 필요 없이 이 캐싱 큐에 있는 것을 재활용하면 된다. 오브젝트 풀링처럼!
    <ul>
      <li><u>💜캐싱 큐에서 해당 캐시를 빼내온다.</u> (중간 삭제)</li>
      <li>뺴내와서 사용 후</li>
      <li><u>💜가상 최근에 사용한 것이므로 캐싱 큐의 가장 뒤에 다시 추가한다.</u> (뒤에 추가)</li>
    </ul>
  </li>
  <li>사용하려는 대상이 <u>💛캐싱 큐에 존재하지 않는다면</u> 캐싱해놓은 것이 없다는 의미이다. 재활용하지 않고 새롭게 로드해 사용 후 나중에 또 사용될지 모르니 캐싱 큐에 넣는다.</li>
  <li>캐싱 큐가 꽉 차있다면
    <ul>
      <li><u>💛캐싱 큐에서 가장 오래된 것을 빼내온다.</u> (맨 앞 삭제)</li>
      <li>즉, 가장 오래된 캐시를 삭제한다.</li>
      <li><u>💛현재 사용한 것을 캐싱 큐에서 집어넣어 캐시로 만든다.</u> (맨 뒤 추가)</li>
    </ul>
  </li>
  <li>캐싱 큐가 꽉 차있는게 아니라면
    <ul>
      <li><u>💛현재 사용한 것을 캐싱 큐에서 집어넣어 캐시로 만든다.</u> (맨 뒤 추가)</li>
      <li>가장 오래된 것을 삭제할 필요는 없다.</li>
    </ul>
  </li>
</ul>

<p>개념은 완전 ‘큐’인데.. 큐에 있는 것들 중 캐시해둔게 있는지 검사를 해야 하고 중간 삭제 과정도 있기 때문에 큐를 사용하기엔 애로사항이 있을 것 같다고 생각했다. <u>중간 삭제, 맨 앞 삭제 연산이 잦으므로</u> <strong>연결리스트</strong>를 사용하기로 하였다.</p>

<p><br /></p>

<h3 id="-직접-구현한-연결리스트">✈ 직접 구현한 연결리스트</h3>

<p>연습삼아.. 복습삼아..^  _^⭐</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Node</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">string</span> <span class="n">city</span><span class="p">;</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">nextNode</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">prevNode</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">LinkedList</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">AddLast</span><span class="p">(</span><span class="n">string</span> <span class="n">_city</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">size</span><span class="o">++</span><span class="p">;</span>

        <span class="n">Node</span><span class="o">*</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">;</span>
        <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">city</span> <span class="o">=</span> <span class="n">_city</span><span class="p">;</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
            <span class="n">tail</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">tail</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
            <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="n">tail</span><span class="p">;</span>

            <span class="n">tail</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">Remove</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">size</span><span class="o">--</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">head</span><span class="p">)</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">tail</span><span class="p">)</span>
            <span class="n">tail</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="p">;</span>
        
        <span class="k">delete</span> <span class="n">node</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">Node</span><span class="o">*</span> <span class="n">Search</span><span class="p">(</span><span class="n">string</span> <span class="n">_city</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Node</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">ptr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">isEqual</span><span class="p">(</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">city</span><span class="p">,</span> <span class="n">_city</span><span class="p">))</span> <span class="k">return</span> <span class="n">ptr</span><span class="p">;</span>
            <span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">bool</span> <span class="n">isEqual</span><span class="p">(</span><span class="n">string</span> <span class="n">a</span><span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">!=</span> <span class="n">b</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">32</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">32</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
            
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">cities</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">LinkedList</span> <span class="n">cache</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cities</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Node</span><span class="o">*</span> <span class="n">cityInCache</span> <span class="o">=</span> <span class="n">cache</span><span class="p">.</span><span class="n">Search</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">cityInCache</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">cacheSize</span><span class="p">)</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">cacheSize</span> <span class="o">&amp;&amp;</span> <span class="n">cacheSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">head</span><span class="p">);</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">cache</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">cityInCache</span><span class="p">);</span>
            <span class="n">cache</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">cities</code> 길이가 100,000 이하인 것을 보고 지레 겁먹고 연결리스트를 사용한 것도 있는데.. 생각해보니 추가/삭제를 행하는 대상은 캐시이고 캐시 사이즈는 30이하라고 문제에서 주어졌으니 vector를 사용하여도 전혀 시간초과가 나지 않을 문제였다. 30 크기 컨테이너에서 중간 삭제 해봤자 뭐… ⭐</p>

<p>그리고 대소문자를 구분하지 않으므로 일치하는 것을 찾을 때 대문자와 소문자 다른 것 정도는 같다고 인식하도록 하는 기능도 넣어주어야 한다. (위에 작성한 <em>isEqual</em> 함수)</p>

<ul>
  <li>이미 캐시된 것이 있는지 캐싱리스트(<code class="language-plaintext highlighter-rouge">cache</code>) 순회하며 찾기!
    <ul>
      <li>캐시된게 없을 때 👉 <code class="language-plaintext highlighter-rouge">cache miss</code>이므로 <em>answer += 5;</em>
        <ul>
          <li>캐싱 리스트가 꽉 차있는게 아니라면
            <ul>
              <li>새로운 캐시로서 뒤에 추가</li>
            </ul>
          </li>
          <li>캐싱 리스트가 꽉 차있다면
            <ul>
              <li>사용된지 가장 오래된 캐시 삭제 (맨앞 삭제)</li>
              <li>새로운 캐시로서 뒤에 추가</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>캐시된게 있을 때 👉 <code class="language-plaintext highlighter-rouge">cache hit</code>이므로 <em>answer += 1;</em>
        <ul>
          <li>해당 캐시 삭제 (중간 삭제)</li>
          <li>가장 최근에 사용된 캐시로서 뒤로 가야하므로 이를 다시 뒤에 추가</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="-stl의-stdlist-사용">✈ STL의 std::list 사용</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;list&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">cities</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cities</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">tolower</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>

    <span class="n">list</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">cache</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cities</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">list</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cache</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">itr</span> <span class="o">==</span> <span class="n">cache</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">cacheSize</span><span class="p">)</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">cacheSize</span> <span class="o">&amp;&amp;</span> <span class="n">cacheSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">cache</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">itr</span><span class="p">);</span>
            <span class="n">cache</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">list</code>
    <ul>
      <li>#include &lt;list&gt; <strong>연결리스트</strong>인 STL이다. 사용법은 다른 STL과 비슷한듯 하다!</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">tolower</code>
    <ul>
      <li>C++에 기본으로 있는, char를 소문자로 변환해주는 함수</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">find</code>
    <ul>
      <li>#include &lt;algorithm&gt;
        <ul>
          <li>첫번째 인수 ~ 두번쨰 인수에 해당하는 범위 내에서 세번째 인수에 일치하는 것을 찾아준다. 없다면 <code class="language-plaintext highlighter-rouge">end()</code> 반복자 리턴.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET